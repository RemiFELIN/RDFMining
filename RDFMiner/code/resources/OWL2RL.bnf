# Productions for the OWL 2 RL profile
# Adapted for RDF Miner by Andrea G. B. Tettamanzi as follows:
# - removed all productions related to annotations
# - removed all productions related to declarations
# - removed all productions related to data types and properties (to be put back...)
# - inserted spaces where needed to separate terminals
# - corrected superComplementOf into superObjectComplementOf in the rule for superClassExpression
# - corrected the rule for ObjectPropertyAxiom: a | was missing between AsymmetricObjectProperty and TransitiveObjectProperty
# - replaced the rules for some non-terminals that will be dynamically generated by SPARQL queries by $-placeholders
# - commented out the rules of the non-terminals that are dynamically generated by SPARQL queries
# - written explicit productions for AnonymousIndividual

Axiom := ClassAxiom | ObjectPropertyAxiom | HasKey | Assertion

# Class :=

# Class-other-than-owl:Thing :=

# ObjectProperty := 

Individual := NamedIndividual | AnonymousIndividual

# NamedIndividual :=

# This is a simplification of the real definition, suited to the project's needs:
AnonymousIndividual := '_:' LowerCaseLetter
LowerCaseLetter := 'a' | 'b' | 'c' | 'd' | 'e' | 'f' |
   'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' |
   'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'

ObjectPropertyExpression := ObjectProperty | InverseObjectProperty

InverseObjectProperty := 'ObjectInverseOf' '(' ObjectProperty ')'


zeroOrOne  := '0' | '1'

subClassExpression :=
    Class-other-than-owl:Thing |
    subObjectIntersectionOf | subObjectUnionOf | ObjectOneOf |
    subObjectSomeValuesFrom | ObjectHasValue

subObjectIntersectionOf := 'ObjectIntersectionOf' '(' subClassExpression ' ' subClassExpression { ' ' subClassExpression } ')'

subObjectUnionOf := 'ObjectUnionOf' '(' subClassExpression ' ' subClassExpression { ' ' subClassExpression } ')'

subObjectSomeValuesFrom :=
    'ObjectSomeValuesFrom' '(' ObjectPropertyExpression ' ' subClassExpression ')' |
    'ObjectSomeValuesFrom' '(' ObjectPropertyExpression ' ' 'owl:Thing' ')'

superClassExpression :=
    Class-other-than-owl:Thing |
    superObjectIntersectionOf | superObjectComplementOf |
    superObjectAllValuesFrom | ObjectHasValue | superObjectMaxCardinality

superObjectIntersectionOf := 'ObjectIntersectionOf' '(' superClassExpression ' ' superClassExpression { ' ' superClassExpression } ')'

superObjectComplementOf := 'ObjectComplementOf' '(' subClassExpression ')'

superObjectAllValuesFrom := 'ObjectAllValuesFrom' '(' ObjectPropertyExpression ' ' superClassExpression ')'

superObjectMaxCardinality :=
    'ObjectMaxCardinality' '(' zeroOrOne ' ' ObjectPropertyExpression [ ' ' subClassExpression ] ')' |
    'ObjectMaxCardinality' '(' zeroOrOne ' ' ObjectPropertyExpression ' ' 'owl:Thing' ')'

equivClassExpression :=
    Class-other-than-owl:Thing |
    equivObjectIntersectionOf |
    ObjectHasValue

equivObjectIntersectionOf := 'ObjectIntersectionOf' '(' equivClassExpression ' ' equivClassExpression { ' ' equivClassExpression } ')'

ObjectOneOf := 'ObjectOneOf' '(' Individual { ' ' Individual }')'

ObjectHasValue := 'ObjectHasValue' '(' ObjectPropertyExpression ' ' Individual ')'



ClassAxiom := SubClassOf | EquivalentClasses | DisjointClasses

SubClassOf := 'SubClassOf' '(' subClassExpression ' ' superClassExpression ')'

EquivalentClasses := 'EquivalentClasses' '(' equivClassExpression ' ' equivClassExpression { ' ' equivClassExpression } ')'

DisjointClasses := 'DisjointClasses' '(' subClassExpression ' ' subClassExpression { ' ' subClassExpression } ')'



ObjectPropertyAxiom :=
    SubObjectPropertyOf | EquivalentObjectProperties |
    DisjointObjectProperties | InverseObjectProperties |
    ObjectPropertyDomain | ObjectPropertyRange |
    FunctionalObjectProperty | InverseFunctionalObjectProperty |
    IrreflexiveObjectProperty |
    SymmetricObjectProperty | AsymmetricObjectProperty |
    TransitiveObjectProperty

SubObjectPropertyOf := 'SubObjectPropertyOf' '(' subObjectPropertyExpression ' ' superObjectPropertyExpression ')'
subObjectPropertyExpression := ObjectPropertyExpression | propertyExpressionChain
propertyExpressionChain := 'ObjectPropertyChain' '(' ObjectPropertyExpression ' ' ObjectPropertyExpression { ' ' ObjectPropertyExpression } ')'
superObjectPropertyExpression := ObjectPropertyExpression

EquivalentObjectProperties := 'EquivalentObjectProperties' '(' ObjectPropertyExpression ' ' ObjectPropertyExpression { ' ' ObjectPropertyExpression } ')'

DisjointObjectProperties := 'DisjointObjectProperties' '(' ObjectPropertyExpression ' ' ObjectPropertyExpression { ' ' ObjectPropertyExpression } ')'

InverseObjectProperties := 'InverseObjectProperties' '(' ObjectPropertyExpression ' ' ObjectPropertyExpression ')'

ObjectPropertyDomain := 'ObjectPropertyDomain' '(' ObjectPropertyExpression ' ' superClassExpression ')'

ObjectPropertyRange := 'ObjectPropertyRange' '(' ObjectPropertyExpression ' ' superClassExpression ')'

FunctionalObjectProperty := 'FunctionalObjectProperty' '(' ObjectPropertyExpression ')'

InverseFunctionalObjectProperty := 'InverseFunctionalObjectProperty' '(' ObjectPropertyExpression ')'

IrreflexiveObjectProperty := 'IrreflexiveObjectProperty' '(' ObjectPropertyExpression ')'

SymmetricObjectProperty := 'SymmetricObjectProperty' '(' ObjectPropertyExpression ')'

AsymmetricObjectProperty := 'AsymmetricObjectProperty' '(' ObjectPropertyExpression ')'

TransitiveObjectProperty := 'TransitiveObjectProperty' '(' ObjectPropertyExpression ')'

HasKey := 'HasKey' '(' subClassExpression '(' { ' ' ObjectPropertyExpression } ')' '()' ')'

Assertion :=
    SameIndividual | DifferentIndividuals | ClassAssertion |
    ObjectPropertyAssertion | NegativeObjectPropertyAssertion

sourceIndividual := Individual
targetIndividual := Individual

SameIndividual := 'SameIndividual' '(' Individual ' ' Individual { ' ' Individual } ')'

DifferentIndividuals := 'DifferentIndividuals' '(' Individual ' ' Individual { ' ' Individual } ')'

ClassAssertion := 'ClassAssertion' '(' superClassExpression ' ' Individual ')'

ObjectPropertyAssertion := 'ObjectPropertyAssertion' '(' ObjectPropertyExpression ' ' sourceIndividual ' ' targetIndividual ')'

NegativeObjectPropertyAssertion := 'NegativeObjectPropertyAssertion' '(' ObjectPropertyExpression ' ' sourceIndividual ' ' targetIndividual ')'
