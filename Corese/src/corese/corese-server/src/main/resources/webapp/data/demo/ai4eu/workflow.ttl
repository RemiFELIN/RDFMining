#
# Query definitions for a Workflow with st:web transformation
# To be used with /tutorial/tutohal
# This graph is stored in named graph st:context
# It is available in query and transformation with bind (st:get(st:context) as ?g)
#
# Olivier Corby - Wimmics Inria I3S - 2018
#

@prefix db:  <http://fr.dbpedia.org/resource/>
@prefix dbo: <http://fr.dbpedia.org/ontology/>
@prefix ai:  <http://www.ai4eu.eu/ontologies/core#>
@prefix dc:  <http://purl.org/dc/terms/>
@prefix de:  <http://purl.org/dc/elements/1.1/>
@prefix rel: <http://ai4eu.org/onto/>

# where to find preprocess function fun:projectName 
@prefix fun: <function/>

#
# List of Query
#
us:ai4eu a sw:Workflow ;
sw:display true;
sw:debug true;
sw:collect true;
sw:body (
    st:intro
    
    st:simple01
    st:simple02
    st:simple03
    st:simple05
    
    st:simple1
    st:simple2
    st:simple20
       
    st:skos1
    
    st:owl1
    st:owl2
    
    st:kg1
    st:kg2
    st:kg3

)
.



st:intro a sw:Query ;
    st:name st:intro ;
    rdfs:label "Introduction" ;

    rdfs:comment """This is a mockup of SPARQL endpoint for the <a href='https://www.ai4eu.eu/'>AI4EU</a> project ontology.
    Choose a query in the selector. 'Previous' and 'Next' enable user to navigate in queries. When a query is selected, a query pattern is shown in the text area. 'Submit' submits the SPARQL query to the server."""@en ;

    rdfs:comment """Choisissez une requête dans le sélecteur. 'Previous' et 'Next' permettent de naviguer dans les requêtes successives.
    'Submit' soumet la requête SPARQL au serveur. """@fr ;

    st:query ""
.




st:selectType 
    st:title "Type" ;
    st:name "mode" ;
    st:uri st:mode ;
    st:graph st:dataset ;
    st:function fun:projectType
    #st:predicate [ rdfs:subClassOf ai:AIResource ]
 .

st:selectKeyword 
    st:title "Keyword" ;
    st:default "" ; st:defaultLabel "Any" ;
    st:name "param" ;
    st:uri st:param ;
    st:graph st:dataset ;
    st:predicate ai:keyword
.

st:selectName 
    st:title "Name" ;
    st:default "" ; st:defaultLabel "Any" ;
    st:name "arg" ;
    st:uri st:arg ;
    st:graph st:dataset ;
    st:function fun:projectName
.

st:selectCreator 
    st:title "Creator" ;
    st:name "mode" ;
    st:uri st:mode ;
    st:graph st:dataset ;
    st:predicate dc:creator
.


st:selectKey 
    st:title "Key" ;
    st:name "arg" ;
    st:uri st:arg ;
    st:graph st:dataset ;
    st:function fun:access
.




st:simple01 a sw:Query ;
st:name st:simple01 ;
rdfs:label "Select Type Keyword Name" ;
rdfs:comment """Select AI resource by type, keyword, name."""@en ;
rdfs:comment """Simple"""@fr ;

st:query 
"""prefix ai: <http://www.ai4eu.eu/ontologies/core#>
prefix o:   <http://dbpedia.org/ontology/>
prefix geo:  <http://www.w3.org/2003/01/geo/wgs84_pos#>
prefix dct: <http://purl.org/dc/terms/> .
select ?a ?name ?type  (group_concat(distinct ?w ; separator = "; ") as ?ww) ?location
where {
  ?a a ?type  ;
  foaf:name ?name ;
  ai:keyword ?w ;  
  dct:creator ?org .
  filter (?type = $mode)
  filter regex(?w, "$param")
  filter regex(?name, "$arg")  
  
  optional {
    ?org ai:location ?location
        service <https://dbpedia.org/sparql> {
            ?location geo:lat ?lat ; geo:long ?lon             
        }
    }
    
   bind (st:location(?location, ?lat, ?lon) as ?tmp)
}
group by ?a


""" ;

st:select st:selectType ;
st:select st:selectKeyword ;
st:select st:selectName 

.




st:simple02 a sw:Query ;
st:name st:simple02 ;
rdfs:label "Select Creator Keyword Simple" ;
rdfs:comment """Select AI resource by creator and/or keyword."""@en ;
rdfs:comment """Simple"""@fr ;

st:query 
"""prefix ai: <http://www.ai4eu.eu/ontologies/core#>
prefix dc:  <http://purl.org/dc/terms/>
prefix de:  <http://purl.org/dc/elements/1.1/> 
prefix dct: <http://purl.org/dc/terms/> .
prefix o:   <http://dbpedia.org/ontology/>
prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>

select ?a ?name ?distrib ?creator (group_concat(distinct ?kw ; separator = "; ") as ?ww)
where {
  ?a foaf:name ?name ;
  ai:keyword ?kw ;
  dct:creator ?creator

  filter (?creator = $mode)
  filter regex(?kw, "$param")
  
  optional {
    ?creator ai:location ?location
        service <https://dbpedia.org/sparql> {
                ?location geo:lat ?lat ; geo:long ?lon 
        }
    }
    
   bind (st:location(?location, ?lat, ?lon) as ?tmp)
  
} 
group by ?a

""" ;

st:select st:selectCreator ;
st:select st:selectKeyword 
.




st:simple03 a sw:Query ;
st:name st:simple03 ;
rdfs:label "Keywords" ;
rdfs:comment """Select AI resource by  keyword."""@en ;
rdfs:comment """Simple"""@fr ;

st:query 
"""prefix ai: <http://www.ai4eu.eu/ontologies/core#>
prefix o:   <http://dbpedia.org/ontology/>
prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
prefix dct: <http://purl.org/dc/terms/> .
select ?w (count(distinct ?a) as ?count)
where {
  ?a a ?type  ;
  foaf:name ?name ;
  dct:creator ?org ;
  ai:keyword ?w .  
 
  optional {
    ?org ai:location ?location
        service <https://dbpedia.org/sparql> {
            ?location geo:lat ?lat ; geo:long ?lon             
        }
    }
    
   bind (st:location(?location, ?lat, ?lon) as ?tmp)
}
group by ?w
order by desc(?count)


""" 
.








st:simple05 a sw:Query ;
st:name st:simple05 ;
rdfs:label "Insert Data" ;
rdfs:comment """Insert Resource ."""@en ;
rdfs:comment """Simple"""@fr ;

st:query 
"""@prefix : <http://www.ai4eu.eu/ontologies/data#> .
@prefix ai: <http://www.ai4eu.eu/ontologies/core#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix cso: <https://cso.kmi.open.ac.uk/topics/> .
@base <http://www.ai4eu.eu/ontologies/data> .

insert data {

:resource a ai:SoftwareComponent ;
  foaf:name ""^^xsd:string ;
  ai:distributed_as :resource-distri ;
  ai:requires :CPU ;
  dct:subject cso:natural_language_processing_systems ;
  ai:keyword "Linguistic Pipelines"@en ,
           "Language Engineering Platform"@en ,
           "NLP"@en ;
  dct:bibliographicCitation ""^^xsd:anyURI ;
  dct:creator :org .

:resource-distri a ai:StandAlone ;
                   ai:atTRL :trl9 ;
                   ai:accompanied_by :resource-devguide ,
                                     :resource-specs ,
                                     :resource-userguide ;
                   ai:under_license :lgpl ;
                   ai:download ""^^xsd:anyURI .

:CPU a ai:ComputationalResource .

:org a foaf:Organization ;
        foaf:name ""@en ;
        foaf:homepage ""^^xsd:anyURI ;
        ai:location <http://dbpedia.org/resource/Country> .

:eu a foaf:Organization ;
      foaf:name "European Commission"@en .

:resource-devguide a ai:Manual ;
                    dct:title " Developers Guide"@en ;
                    ai:download ""^^xsd:anyURI .

:resource-specs a ai:Manual ;
                 dct:title "Specification"@en ;
                 ai:download ""^^xsd:anyURI .

:resource-userguide a ai:Manual ;
                     dct:title "Users Guide"@en ;
                     ai:download ""^^xsd:anyURI .

:lgpl a dct:LicenseDocument ;
        dct:source "https://www.gnu.org/copyleft/lesser.html"^^xsd:anyURI .

:trl9 a ai:TechnologyReadinessLevel ;
        ai:authority :eu ;
        ai:trl 9 ;
        dct:description "actual system proven in operational environment (competitive manufacturing in the case of key enabling technologies; or in space)"@en .
}
""" ;
st:select st:selectType 
.







st:simple1 a sw:Query ;
st:name st:simple1 ;
rdfs:label "Construct Type Keyword Name" ;
rdfs:comment """Construct AI resource by type, keyword, name."""@en ;
rdfs:comment """Simple"""@fr ;

st:query 
"""prefix ai: <http://www.ai4eu.eu/ontologies/core#>
construct {
  ?x ?p ?y  
} 
where {
  ?x a ?type  ;
  foaf:name ?name ;
  ai:keyword ?kw .  
  filter (?type = $mode)
  filter regex(?kw, "$param")
  filter regex(?name, "$arg")  
  ?x ?p ?y  
} 

""" ;

st:select st:selectType ;
st:select st:selectKeyword ;
st:select st:selectName
.




st:simple2 a sw:Query ;
st:name st:simple2 ;
rdfs:label "Construct Creator Keyword Simple" ;
rdfs:comment """Select AI resource by creator and/or keyword."""@en ;
rdfs:comment """Simple"""@fr ;

st:query 
"""prefix ai: <http://www.ai4eu.eu/ontologies/core#>
prefix dc:  <http://purl.org/dc/terms/>
prefix de:  <http://purl.org/dc/elements/1.1/> 

construct {
  ?x ?p ?w  
}
where {
  ?x a ?type  ;
  ai:keyword ?kw ;
  dc:creator ?create  .

  filter (?create = $mode)
  filter regex(?kw, "$param")
  
  ?x ?p ?w  
} 

""" ;

st:select st:selectCreator ;
st:select st:selectKeyword 
.




st:skos1 a sw:Query ;
st:name st:skos1 ;
rdfs:label "SKOS Thesaurus" ;
rdfs:comment """SKOS Thesaurus."""@en ;
rdfs:comment """SKOS Thesaurus"""@fr ;

st:query 
"""
prefix rel: <http://ai4eu.org/onto/>
prefix ai:  <http://ai4eu.org/ns/>
select ?l ?x  where {
?x a skos:Concept ; rdfs:label ?l 
}
order by ?l 
limit 100
""" 
.




st:owl1 a sw:Query ;
st:name st:owl1 ;
rdfs:label "Ontology Class" ;
rdfs:comment """Ontology Class."""@en ;
rdfs:comment """Ontology Class"""@fr ;

st:query 
"""
prefix rel: <http://ai4eu.org/onto/>
prefix ai:  <http://ai4eu.org/ns/>
select ?l ?x  where {
?x a owl:Class ; rdfs:label ?l 
}
order by ?l 
""" 
.

st:owl2 a sw:Query ;
st:name st:owl2 ;
rdfs:label "Ontology Property" ;
rdfs:comment """Ontology Property."""@en ;
rdfs:comment """Ontology Property"""@fr ;

st:query 
"""
prefix rel: <http://ai4eu.org/onto/>
prefix ai:  <http://ai4eu.org/ns/>
select ?l ?x  where {
{?x a owl:DatatypeProperty} union { ?x a owl:ObjectProperty }
?x  rdfs:label ?l 
}
order by ?l 
""" 
.




st:kg1 a sw:Query ;
st:name st:kg1 ;
rdfs:label "Knowledge Graph Instance" ;
rdfs:comment """Knowledge Graph Instance."""@en ;
rdfs:comment """Knowledge Graph"""@fr ;

st:query 
"""
prefix rel: <http://ai4eu.org/onto/>
prefix ai:  <http://ai4eu.org/ns/>
select * where {
?x rel:instanceof $mode ; rdfs:label ?l
}
order by ?l
limit 100
""" ;
st:select st:selectKind 
.

#
# create a selector with the values of property rel:instanceof 
#
st:selectKind
    st:title "Type" ;
    st:name "mode" ;
    st:uri st:mode ;
    st:graph st:dataset ;
    st:predicate rel:instanceof
.




st:kg2 a sw:Query ;
st:name st:kg2 ;
rdfs:label "Knowledge Graph Property" ;
rdfs:comment """
Knowledge Graph Property.
<a href="http://covid19.i3s.unice.fr:8080/ldviz?url=http://corese.inria.fr/ai4eu/sparql&title=KG Property&query=prefix rel: <http://ai4eu.org/onto/> select ?n1 ?n2 (us:relation as ?doc) where { select ?n1 ?n2 (count(*) as ?c) where { ?x ?n1 ?y . ?y ?n2 ?z filter strstarts(?n1, rel:) filter strstarts(?n2, rel:) } group by ?n1 ?n2 having (?c >= 5) } limit 500">LDViz query</a>
"""@en ;
rdfs:comment """Knowledge Graph"""@fr ;

st:query 
"""
prefix rel: <http://ai4eu.org/onto/>
prefix ai:  <http://ai4eu.org/ns/>
select  ?p (count(*) as ?c) where {
?x ?p ?y
}
group by ?p
order by desc(?c)
limit 100
"""
.


st:kg3 a sw:Query ;
st:name st:kg3 ;
rdfs:label "Knowledge Graph Type" ;
rdfs:comment """Knowledge Graph Type."""@en ;
rdfs:comment """Knowledge Graph"""@fr ;

st:query 
"""
prefix rel: <http://ai4eu.org/onto/>
prefix ai:  <http://ai4eu.org/ns/>
select  ?t (count(*) as ?c) where {
?x rel:instanceof ?t
}
group by ?t
order by desc(?c)
limit 100
"""
.


































