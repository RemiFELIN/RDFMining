<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Fri Jun 21 13:43:42 CEST 2019
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://ns.inria.fr/sparql-template/'>
<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template sql:or {
  ?e
  ; separator = " OR "
}
where {
  ?in rdf:rest*/rdf:first ?e
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# SQL Pretty Printer
# Wimmics Inria I3S 2013
#
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template st:start {
  ?in
  ; separator = "\n\n"
}
where {
  ?in a sql:Query
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template sql:comma {
  ?e
  ; separator = ", "
}
where {
  ?in rdf:rest*/rdf:first ?e
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template sql:and {
  ?e
  ; separator = " AND "
}
where {
  ?in rdf:rest*/rdf:first ?e
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template sql:semicolon {
  ?e
  ; separator = ",\n"
}
where {
  ?in rdf:rest*/rdf:first ?e
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template sql:line {
  ?e
  ; separator = "\n"
}
where {
  ?in rdf:rest*/rdf:first ?e
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template  {
  ?e
}
where {
  ?in rdf:rest*/rdf:first ?e
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template  {
    "("   
      st:call-template(sql:comma, ?columns) 
    ")"
}
where {     
     	?in a sql:Columns ;
	     sql:args ?columns
    
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template  {
  	"SELECT " st:call-template(sql:comma, ?select)
}
where {
  ?in a sql:Select ;
     sql:args ?select
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template {
   ?label "(" 
      st:call-template(sql:comma, ?args)
   ")"
}
where {
	?in a ?function ;
	    sql:args ?args
}
values (?function ?label) {
	(sql:Min   "MIN")
	(sql:Max   "MAX")
	(sql:Avg   "AVG")
	(sql:Last  "LAST")
	(sql:First "FIRST")
	(sql:Count "COUNT")
	(sql:Sum   "SUM")
	(sql:len   "LEN")
	(sql:Upper "UPPER")
	(sql:Lower "LOWER")
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sql: <http://ns.inria.fr/ast/sql#> 

template  {
   xsd:string(?name) 
}
where {
  ?in a sql:Column ;
     sql:label ?name
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template {
?label ?args
}
where {
	?in a ?create ;
	sql:args ?args
}
values (?create ?label) {
	(sql:CreateTable 	"CREATE TABLE ")
	(sql:CreateDatabase 	"CREATE DATABASE ")
	(sql:CreateIndex 	"CREATE INDEX ")
	(sql:CreateIndexUnique 	"CREATE UNIQUE INDEX ")
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template {
  ?label ?arg
}
where {
	?in a ?drop ;
	sql:args ?arg
}
values (?drop ?label) {
	(sql:DropIndex 		"DROP INDEX ")
	(sql:DropTable 		"DROP TABLE ")
	(sql:DropDatabase 	"DROP DATABASE ")
	(sql:TruncateTable  	"TRUNCATE TABLE ")
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template  {
  st:call-template(sql:and,?args)
}
where {
  ?in a sql:And ;
     sql:args ?args
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template  {
	?arg1 " IN (" ?arg2 ")"
}
where {
  ?in a sql:In ;
     sql:args (?arg1 ?arg2)
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sql: <http://ns.inria.fr/ast/sql#> 

template  {
   st:turtle(?value)
}
where {
  ?in a sql:Constant 
  { ?in sql:label ?value } union
  { ?in sql:value ?value } 
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template  {
    st:call-template(sql:line, ?body)
    if (! bound(?x), ";", "")
}
where { 
  ?in a sql:Query ;
      sql:args ?body
  optional { ?x ?q ?in }
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template {
"ALTER TABLE " ?arg1 ?label "\n" ?arg2
}
where {
	?in a ?alter ;
	sql:args (?arg1 ?arg2)
}
values (?alter ?label) {
	(sql:AlterTableAdd "ADD ")
	(sql:AlterTableDrop "DROP COLUMN ")
	(sql:AlterTableAlter "ALTER COLUMN ")
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template  {
  ?name 
}
where {
  ?in a sql:As ;
     sql:args ?name
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template {
  ?arg1 "\n" ?label ?arg2 "\n" ?arg3 
}
where {
	?in a ?join ;
	sql:args (?arg1 ?arg2 ?arg3)
}
values (?join ?label) {
	(sql:InnerJoin "INNER JOIN ")
	(sql:FullJoin "FULL OUTER JOIN ")
	(sql:LeftJoin "LEFT JOIN ")
	(sql:RightJoin "RIGHT JOIN ")
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template  {
  st:call-template(sql:or, ?args)
}
where {
  ?in a sql:Or ;
     sql:args ?args
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template {
  ?label st:call-template(sql:comma, ?args)
}
where {
	?in a ?clause ;
	sql:args ?args
}
values (?clause ?label) {
	(sql:From 	"FROM ")
	(sql:GroupBy 	"GROUP BY ")
	(sql:OrderBy 	"ORDER BY ")
	(sql:ListOfValues "")
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template  {
  "VALUES (" st:call-template(sql:comma, ?values)  ")"
}
where {
  ?in a sql:Values ;
     sql:args ?values
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#>
@prefix math: <http://example.org/mathgram#> 

template  {
  ?arg1 ?label ?arg2
}
where {
	?in a ?ope ;
	  sql:args (?arg1 ?arg2)
}
values (?ope ?label) {
	(math:Mult  " * ")
	(math:Add   " + ")
	(math:Sub   " - ")
	(math:Div   " / ")
	(sql:Equals   " = ")
	(sql:NotEquals   " <> ")
	(sql:GreaterThan   " > ")
	(sql:LessThan   " < ")
	(sql:GreaterEquals   " >= ")
	(sql:LessEquals   " <= ")
	(sql:Between " BETWEEN ")
	(sql:NotBetween " NOT BETWEEN ")
	(sql:Like " LIKE ")
	(sql:NotLike " NOT LIKE ")
	(sql:Union "\nUNION\n")
	(sql:UnionAll "\nUNION ALL\n")
}





]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template  {
    "(\n" 
      st:call-template(sql:semicolon, ?columnstable) 
    "\n)"
}
where {    
     	?in a sql:ColumnsTable ;
	     sql:args ?columnstable     
}



]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sql: <http://ns.inria.fr/ast/sql#> 

template  {
   xsd:string(?name) 
}
where {
  ?in a sql:Table ;
     sql:label ?name
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sql: <http://ns.inria.fr/ast/sql#> 

template  {
   " AS " xsd:string(?name) 
}
where {
  ?in a sql:Alias ;
     sql:label ?name
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template {
  ?label ?args
}
where {
	?in a ?delete ;
	sql:args ?args
}
values (?delete ?label) {
	(sql:Delete 	"DELETE ")
	(sql:Deletestar "DELETE * FROM ")
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
@prefix sql: <http://ns.inria.fr/ast/sql#> 

template {
?label ?args
}
where {
	?in a ?clause ;
	sql:args ?args
}
values (?clause ?label) {
	(sql:Where 	"WHERE ")
	(sql:Update 	"UPDATE ")
	(sql:Set 	"SET ")
	(sql:On 	"ON ")
	(sql:Into 	"INTO ")
	(sql:Insert 	"INSERT INTO ")
	(sql:Having 	"HAVING ")
}


]]>
</body>
</rule>

</rdf:RDF>
