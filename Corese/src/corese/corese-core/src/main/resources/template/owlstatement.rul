<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Fri Jun 21 13:43:42 CEST 2019
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://ns.inria.fr/sparql-template/'>
<rule>
<body>
<![CDATA[
template st:default(?in) { 
}
where {
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# defaut processing of a variable is 
# st:turtle on URI 
# st:apply-templates on Blank and Literal
# Literals are displayed by st:xsdLiteral  (literalvalue.rq)
# otherwise must use st:turtle explicitely (e.g. cardinality.rq)
#
# Olivier Corby, Wimmics Inria I3S, 2014
#
prefix owlfs: <http://ns.inria.fr/sparql-template/owlfs/>

template st:profile(?in) {
    
}
where {}

function st:process(?in) {  owlfs:process(?in) }

  
  function xt:bnl(?x) {
    if (?x = "", ?x, concat("\n", ?x))
  }

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:annotate(?s, ?p, ?o) {
       
    "Annotation(" ?q  " "  ?c ")" "\n"
    ; separator = ""
  
}
where {
  
  ?a owl:annotatedSource   ?s ;
     owl:annotatedProperty ?p ;
     owl:annotatedTarget   ?o ;
     a owl:Annotation ;
     ?q ?c 
    
    filter (?q not in 
      (rdf:type, owl:annotatedSource, owl:annotatedProperty, owl:annotatedTarget))
   
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
  if (isBlank(?e), st:nl(), "")
  ?e 
  ; separator = " "
}
where {
  ?in rdf:rest*/rdf:first ?e
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Olivier Corby - Wimmics Inria I3S - 2013
#
template {
    if (isLiteral(?v), "DataPropertyAssertion", "ObjectPropertyAssertion") 
    "("
	?p " "  ?in " " ?v
    ")"
}
where {
  ?in ?p ?v  

  filter(
    ! strstarts(?p, owl:) &&
    ! strstarts(?p, rdf:) && 
    ! strstarts(?p, rdfs:) 
  )
  filter not exists { ?in a owl:Axiom }
  filter not exists { ?in a owl:Annotation }
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
   "DifferentIndividuals("  
      ?in " " ?l 
   ")"   
}
where {
  ?in a owl:allDifferent   
  ?in owl:members | owl:distinctMembers ?l 
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
   xsd:string(?l)
   "("  ?in " " ?y ")"
}
where {
   ?in ?p ?y 
}
values (?p ?l) {
  (owl:differentFrom "DifferentIndividuals")
  (owl:sameAs "SameIndividual")
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
    xsd:string(?l)  
    "(" 
      ?p " " ?s " "  ?t
    ")"
}
where {
  ?in a owl:NegativePropertyAssertion ;
     owl:sourceIndividual  ?s ;
     owl:assertionProperty ?p ;
     ?q  ?t
}
values (?q ?l) {
  (owl:targetIndividual "NegativeObjectPropertyAssertion")
  (owl:targetValue      "NegativeDataPropertyAssertion")
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
   "AnnotationAssertion(owl:deprecated " ?in " " st:xsdLiteral(true) 
   ")"  
}
where {
  { ?in a owl:DeprecatedClass } union 
  { ?in a owl:DeprecatedProperty }  

}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Olivier Corby - Wimmics Inria I3S - 2013
#
template {
   "ClassAssertion(" ?t " " ?in ")"
}
where {
  ?in a ?t
  filter (!(strstarts(?t, owl:) 
     || strstarts(?t, rdf:) 
     || strstarts(?t, rdfs:)) )
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
   "AnnotationAssertion(" 
   
    xt:bnl(st:call-template(st:annotate, ?in, ?p, ?l))
    
      ?p " " 
      ?in " " st:turtle(?l)
   ")"
}
where {
  ?in ?p ?l 
  filter not exists { ?in a owl:Axiom }  
}
values ?p { rdfs:comment rdfs:label rdfs:seeAlso rdfs:isDefinedBy owl:priorVersion owl:backwardCompatibleWith owl:incompatibleWith }
]]>
</body>
</rule>

</rdf:RDF>
