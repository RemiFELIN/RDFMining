<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Thu Sep 17 16:12:54 CEST 2020
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://ns.inria.fr/sparql-template/'>
<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2019
#
template st:tuple(?in)  {
  "\ntriple(" ?in " " ?p " " ?y " " ?term ")" 
  
  ; separator = " ."
}
where { 
  triple(?in ?p ?y ?term)   
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:start {
  st:prolog("@prefix")
  st:nl()
  str(?main)
  st:nl()
  st:nl()
  str(?bnode)
}
where {
  # clean st:bnode table if any
  bind (st:cset(st:bnode) as ?bn)
  bind (st:set(st:allgraph, true)  as ?s1)
  
  # pprint URI and subject only bnode
  bind (st:set(st:reference, false) as ?ref1)
  bind (st:call-template(st:main)  as ?main)
  
  # pprint bnode as _:b instead of []
  bind (st:set(st:reference, true) as ?ref2)
  
  # pprint other bnodes that are subject and object
  bind (st:call-template(st:bnode) as ?bnode)
  
  bind (st:set(st:allgraph, false) as ?s2)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# PPrint bnode that have not already been pprinted
# PRAGMA: st:get(st:reference) = true
# bnode pprinted as _:b (and not as []) to handle possible references
#
template st:bnode { 

    # repeat test "not already pprint" because apply-templates(?x) may pprint bnode meanwhile
    if (st:cget(st:bnode, ?x, true), "", concat(st:apply-templates(?x),  " ."))
    
    ; separator = "\n\n"
}
where {
  select distinct ?x where { 
    bind (st:focus() as ?x)

    ?x ?p ?y  

    filter isBlank(?x) 

    # bnode not already pprint
    filter (! st:cget(st:bnode, ?x, true))
                
  } 
  order by if (?p in (rdf:first, rdf:rest), 1, 0) ?x
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:main { 
    st:apply-templates(?x)  " ."
    ; separator = "\n\n"
}
where {
  select distinct ?x where { 
    bind (st:focus() as ?x)
    bind (bnode() as ?z)
    bind (bnode() as ?q)
    ?x ?p ?y  
    #filter (isURI(?x) || not exists { ?z ?q ?x })   
    filter (isURI(?x) || ! xt:exists(?z, ?q, ?x))          
  } 
  order by if (isURI(?x), 0, 1) ?x
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:all {
  st:apply-templates(?x)
  ; separator = "\n\n"
}
where {
  select distinct ?x where { 
    ?x ?p ?y 
    filter ( isURI(?x) || not exists { ?z ?q ?x } )
  }
}
order by ?x
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:value {
             
   format {
    "%s %s"
	if (?p = rdf:type, "a", st:turtle(?p))  	       
	if (?refer, st:turtle(?y), if (isURI(?y) && ?y = rdf:nil, "()", st:process(?y)))
   }   
             
   ; separator = concat(" ;", st:nl()) 
}
where {
  triple(?in ?p ?y |?l|)
  filter (! isURI(?in) || ?l = 0)
  
  bind (
    isBlank(?y) && not exists { ?y rdf:first ?e }
    && (
    st:get(st:reference, true)
    || (st:get(st:allgraph, true) && exists { ?x ?q ?y . filter(?in != ?x) } )
    || exists { ?y ?q ?y } 
    || ?in = ?y
    ) 
  as ?refer)      
}
order by if (?p = rdf:type, 0, 1) ?p ?y
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:urivalue(?in) {  
  ibox {   
	st:call-template(st:value, ?in)      
  } 
}
where { 

}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:rdf {
  st:apply-templates(?x)
  ; separator = "\n\n"
}
where {
  select distinct ?x where { 
    ?x ?p ?y 
    minus {
       ?x a ?t . 
       filter(
	    strstarts(?t, rdf:)
	 || strstarts(?t, rdfs:)
	 || strstarts(?t, owl:)
       )
    }
    
    filter ( isURI(?x) || not exists { ?z ?q ?x } )
  }
}
order by ?x
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:rdfs {
  st:apply-templates(?x)
  ; separator = "\n\n"
}
where {
  select distinct ?x where { 
    
       ?x a ?t . 
       filter(
	    strstarts(?t, rdf:)
	 || strstarts(?t, rdfs:)
	 || strstarts(?t, owl:)
       )
    
    filter ( isURI(?x) || not exists { ?z ?q ?x } )
  }
}
order by ?x
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# defaut processing of a variable is st:apply-templates 
#
# Olivier Corby, Wimmics Inria I3S, 2014
#
template st:profile(?in) {
  
}
where {}

 function st:process(?in) {
      if (isBlank(?in), st:apply-templates(?in), 
      if (isLiteral(?in), st:pretty(?in),
      st:turtle(?in)))
 }
 
 function st:pretty(?in){
    if (datatype(?in) = xt:graph) {str(?in)}
    else {st:turtle(?in)}
 }
      
 function st:default(?in) {
    st:turtle(?in)
 }
 
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template {
  "(" 
    group { 
      if (?refer, st:turtle(?e), ?e) 
      ; separator = "\n"
    } 
  ")"
}
where {
  ?in rdf:rest* ?r
  ?r  rdf:first ?e
  filter (?r != rdf:nil)

  bind (
  ((st:get(st:reference, true) && not exists {?e rdf:first ?f})  
    ||
    (isBlank(?e) && 
        (
        #(st:get(st:allgraph, true) &&  exists { ?x ?p ?e . filter(?x != ?r) })
        (st:get(st:allgraph, true) &&  xt:mindegree(?e, 1, 2))
        || let (?qq = bnode()) { xt:exists(?e, ?qq, ?e) }
        #exists { ?e ?q ?e }
        ))
    )
    as ?refer)
    
  bind (st:cset(st:bnode, ?r, true) as ?bn)

}
# after URI and blank
pragma { st:template st:priority 1000 }
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template  {
  str(?triple)     
  
  str(?tuple)
  
}
where { 
  ?in ?pp ?y   
  filter isURI(?in)
  
  bind (st:call-template(st:urivalue, ?in) as ?pvalue) 
  bind (st:call-template(st:tuple, ?in)    as ?tuple)
  
  bind (if (strlen(?pvalue) > 0, 
    st:format("%s %s%s", st:turtle(?in), ?pvalue, if (strlen(?tuple) > 0, " .", "")), 
    "") as ?triple)
}
limit 1
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template {
  if (?refer, concat(st:turtle(?in), " "), "[")
  
  ibox {
	st:call-template(st:value, ?in)
  } 
      
  if (?refer, "", "]")
}
where {
  ?in ?p ?y   
  filter isBlank(?in)
  bind (bnode() as ?e)
  filter (! xt:exists(?in, rdf:first, ?e) )
     
  bind (
    st:get(st:reference, true)
    ||
    #(st:get(st:allgraph, true) && exists { ?a ?q ?in . ?b ?r ?in  filter(?a != ?b) })
    (st:get(st:allgraph, true) && xt:mindegree(?in, 1, 2))
	|| xt:exists(?in, ?e, ?in) 
    
  as ?refer)
  
  bind (st:cset(st:bnode, ?in, true) as ?bn)
  
}
limit 1
]]>
</body>
</rule>

</rdf:RDF>
