/**
 * 
 */
package com.i3s.app.rdfminer;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.jena.shared.JenaException;
import org.apache.jena.sparql.engine.http.QueryExceptionHTTP;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.json.JSONObject;
import org.kohsuke.args4j.CmdLineException;
import org.kohsuke.args4j.CmdLineParser;

import com.i3s.app.rdfminer.axiom.Axiom;
import com.i3s.app.rdfminer.axiom.AxiomFactory;
import com.i3s.app.rdfminer.axiom.AxiomGenerator;
import com.i3s.app.rdfminer.axiom.CandidateAxiomGenerator;
import com.i3s.app.rdfminer.axiom.IncreasingTimePredictorAxiomGenerator;
import com.i3s.app.rdfminer.axiom.RandomAxiomGenerator;
import com.i3s.app.rdfminer.axiom.type.SubClassOfAxiom;
import com.i3s.app.rdfminer.launcher.LaunchWithoutGE;
import com.i3s.app.rdfminer.output.AxiomTestJSON;
import com.i3s.app.rdfminer.parameters.CmdLineParameters;
import com.i3s.app.rdfminer.sparql.SparqlEndpoint;
import Individuals.Phenotype;

//import com.hp.hpl.jena.shared.JenaException;
//import com.hp.hpl.jena.sparql.engine.http.QueryExceptionHTTP;

/**
 * The main class of the RDFMiner experimental tool.
 * <p>
 * More information about OWL 2 may be found in the
 * <a href="http://www.w3.org/TR/2012/REC-owl2-quick-reference-20121211/">OWL2
 * Quick Reference, 2nd Edition</a>.
 * </p>
 * 
 * @author Andrea G. B. Tettamanzi
 *
 */
public class RDFMiner {

	private static Logger logger = Logger.getLogger(RDFMiner.class.getName());

	public static CmdLineParameters parameters = new CmdLineParameters();

	/**
	 * A SPARQL endpoint which can be used to query the RDF repository.
	 */
	public static SparqlEndpoint endpoint;

	/**
	 * An executor to be used to submit asynchronous tasks which might be subjected
	 * to a time-out.
	 */
	public static ExecutorService executor;

	/**
	 * The output file in json
	 */
	public static FileWriter output;

	/**
	 * A service native method to query for CPU usage.
	 * <p>
	 * The name and implementation of this method are adapted from <a href=
	 * "http://www.javaworld.com/article/2077361/learn-java/profiling-cpu-usage-from-within-a-java-application.html">this
	 * 2002 blog post</a>.
	 * </p>
	 * <p>
	 * The implementation in C language of this native method is contained in the
	 * two source files <code>rdfminer_RDFMiner.h</code> and
	 * <code>rdfminer_RDFMiner.c</code>.
	 * </p>
	 * 
	 * @return the number of milliseconds of CPU time used by the current process so
	 *         far
	 */
	public static native long getProcessCPUTime();
	
	public static String[][] Predicate_Table;

	/**
	 * The entry point of the RDF Miner application.
	 */
	public static void main(String[] args) {

		// Configure the log4j loggers:
		PropertyConfigurator.configure(Global.LOG4J_PROPERTIES);

		// Parse the command-line parameters and options:
		CmdLineParser parser = new CmdLineParser(parameters);

		// if you have a wider console, you could increase the value;
		// here 80 is also the default
		parser.getProperties().withUsageWidth(80);

		try {
			// parse the arguments.
			parser.parseArgument(args);
		} catch (CmdLineException e) {
			// if there's a problem in the command line, you'll get this
			// exception. this will report an error message.
			System.err.println(e.getMessage());
			// print the list of available options
			System.err.println();
			parser.printUsage(System.err);
			System.err.println();
			return;
		}

		if (RDFMiner.parameters.help) {
			// print the list of available options
			System.out.println();
			parser.printUsage(System.out);
			System.out.println();
			return;
		}

		// Get environment variable from container (defined in Dockerfile)
		logger.info("This is RDF Miner, version " + System.getenv("RDFMINER_VERSION"));
		// Load rdfminer_RDFMINER.so generated by ./compile_c_code.sh (see /scripts
		// folder)
		System.loadLibrary("rdfminer_RDFMiner");
		
		LaunchWithoutGE.run(parameters, output);
		
	}

}
