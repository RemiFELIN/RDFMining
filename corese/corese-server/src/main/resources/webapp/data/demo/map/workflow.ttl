#
# Query definitions for a Workflow with st:myweb transformation and function.rq ldscript 
# This graph is stored in named graph st:context
# It is available in query and transformation with bind (st:get(st:context) as ?g)
#
# Olivier Corby - Wimmics Inria UCA I3S - 2023
#

@prefix dbo: <http://dbpedia.org/ontology/>
@prefix map: <http://ns.inria.fr/map/>
@prefix key: <key:>
[] owl:imports <workflow-select.ttl>



#
# List of Query
#
us:map a sw:Workflow ;
sw:display true;
sw:debug true;
sw:collect true;
sw:body ( 
    st:intro
    st:indexNature
    st:indexArtefact
    st:indexAll
    st:indexPositionLabel
    st:indexPositionCom
    st:localisationType
    st:indexQuery
    st:indexSPARQL
    st:query
    st:count
)
.

#
# JavaScript function definitions inserted in html form
#
[] st:javascript 
"""
function test(){
    alert("Hello World");
}

function test(mes){
    alert(mes);
}

function setimgsize(value) {
    table = document.getElementById("album");
    for (let elem of table.getElementsByTagName("img")) {
        elem.height = value;
    }
}

function settext() {
    set('cname', 'Saint'); 
    set('dname', 'Alpes'); 
    set('rname', 'Alpes'); 
    set('pname', 'France'); 
    set('lname', 'Saint');
}

function resettext() {
    const names = ["cname", "dname", "rname", "pname", "lname"];
    for (let elem of names) {
        set(elem, ''); 
    }
}

function resettextoper() {
    const names = ["ocname", "odname", "orname", "opname", "olname"];
    for (let elem of names) {
        set(elem, 'http://ns.inria.fr/sparql-function/contains'); 
    }
}



function setselect() {
    set('idtyp', 'http://ns.inria.fr/map/Résurgence');
    set('idcom', 'http://ns.inria.fr/map/resource/Vence06');
    set('iddep', 'Alpes-Maritimes');
    set('idreg', 'Provence-Alpes-Côte d\\'Azur');
}

function resetselect() {
    set('idtyp', 'http://ns.inria.fr/map/Objet');
    for (let elem of ['idtyp2', 'idtyp3']) {
        set(elem, 'http://ns.inria.fr/map/Undefined');
    }
    for (let elem of ['idcom', 'iddep', 'idreg', 'idpay']) {
        set(elem, "");
    }
}

function info() {
    table = document.getElementById("album");
    for (let elem of table.getElementsByTagName("span")) {
        if (elem.style.display == "") {
            elem.style.display = "none";
        }
        else {
            elem.style.display = "";
        }
    }
}
"""
.

st:intro a sw:Query ;
    st:name st:intro ;
    rdfs:label "Introduction" ;

    rdfs:comment """<p>This is a SPARQL endpoint for a <a href='http://umap.openstreetmap.fr/fr/map/provence-alpes_455480'>semantic map</a> project on top of openstreetmap.
    An RDF dataset is generated from openstreetmap <a href="/data/demo/map/map.json">JSON export format</a> and the dataset is completed with an 
    <a href="/data/demo/map/schema.ttl">RDF Schema</a>. A set of predefined queries is available here with HTML select input to specify values such as 
    the type of a resource.
    Choose a query in the selector.  When a query is selected, a query pattern is shown in the text area. The 'Submit' button sends the SPARQL query to the server. 
    <p>
    UNION operator is like OR but UNION has precedence over AND: A UNION B AND C ::= (A OR B) AND C. </p>
    </p>
    <p>
    Several search engines are available with specific focus: <br/>
    <ol>
    <li><a target="_new" href="/srv/service/amapquery?mode=map:Lac">Type de lieu dans l'URL</a></li>
    <li><a href="amap">Général</a></li>
    <li><a href="nature">Nature</a></li>
    <li><a href="eau">Eau</a></li>
    <li><a href="culture">Culture</a></li>
    <li><a href="mega">Mégalithe</a></li>
    <li><a href="antique">Antiquité</a></li>
    <li><a href="borne">Borne Frontière</a></li>
    <li><a href="paca">Provence Alpes Côte d'Azur</a></li>
    <li><a href="paca06">Alpes-Maritimes</a></li>
    </ol>
    </p>
    """@en ;

    rdfs:comment """Choisissez une requête dans le sélecteur. 'Previous' et 'Next' permettent de naviguer dans les requêtes successives.
    'Submit' soumet la requête SPARQL au serveur. """@fr ;

    st:query """$prefix$select *
    where {
        service <store:mapdatamanager> {
            ?asite rdf:type/rdfs:subClassOf* map:Objet ; 
                map:commune ?uriCommune ;
                ?v ?w 
            filter (?v not in (map:commune))
            filter us:focusInstance(?asite)

            ?uriCommune rdfs:label ?nomCommune ;
                map:departement ?code .
            ?uriDepartement dbo:inseeCode ?code ;
                rdfs:label ?nomDepartement ;
                dbo:hasRegion ?uriRegion .
            filter not exists { ?uriRegion a map:Abstract }
            ?uriRegion rdfs:label ?nomRegion            
        }
    } limit 25"""
.

#
# query pattern processed by myweb.rul using function us:expand
# replace occurrence of $name$ by value of st:pattern in query
#

st:prefixPattern st:name "$prefix$" ;
st:pattern
"""prefix map: <http://ns.inria.fr/map/> .
prefix key: <key:>
prefix dbo: <http://dbpedia.org/ontology/> .
prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
prefix wiki: <http://fr.wikipedia.org/wiki/> .
prefix ft:  <file:///user/corby/home/AAServer/data/format/map/> .
"""
.

#prefix ft: <http://ns.inria.fr/sparql-template/format/map/>
#prefix ft: <file:///opt/corese/demo/format/map/>
#prefix ft: <file:///user/corby/home/AAServer/data/format/map/>


st:typePattern st:name "$type$" ;
st:pattern """ {select distinct ?url where { 
                # mode parameter is a list (t1 UNION t2 AND t3)
                # return a union of conjunction of classes ((t1 t3) (t2 t3)) = ((t1 and t3) union (t2 and t3))
                bind (us:process(st:get("mode")) as ?modeList)
                # and (t1 t3)
                values ?typeList { unnest(?modeList) }
                bind (xt:first(?typeList) as ?fstType)
                
                ?url rdf:type/rdfs:subClassOf* ?fstType
                # check st:include st:exclude from profile.ttl param context
                filter us:focusInstance(?url)
                
                filter not exists {
                    values ?type { unnest(xt:rest(?typeList)) }
                    filter if (isURI(?type), 
                        not exists {?url rdf:type/rdfs:subClassOf* ?type}, 
                        # (<NOT> type) 
                        exists { bind (xt:first(xt:rest(?type)) as ?atype) ?url rdf:type/rdfs:subClassOf* ?atype})  
                }
            }}"""
.
            
st:regionPattern st:name "$region$" ;
st:pattern """?url map:commune/map:pays ?pays 
            filter us:match(?pays, ?paysList)
            filter us:compute(?pays, st:get(key:pname))
            
            {?url rdfs:label ?label ; 
                map:commune/map:departement ?dep .
            ?dept dbo:inseeCode ?dep ; 
                rdfs:label ?deptName . 
            # param value list from html select user interface
            filter us:match(?deptName, st:get(key:departement))
            filter us:compute(?deptName, st:get(key:dname))
            # param value list from mapprofile service context
            filter us:focus(?dep, st:departement)
                       
            ?dept dbo:hasRegion ?region .
            ?region rdfs:label ?regionName
            filter us:match(?regionName, st:get(key:region))
            filter us:compute(?regionName, st:get(key:rname))
            filter us:focus(?regionName, st:region) 
            }
            union 
            {?url rdfs:label ?label ; 
                map:commune [
                    map:departement 0 ; 
                    map:pays ?pays ]
                filter us:empty(st:get(key:departement))
                filter us:empty(st:get(key:region))
                filter us:focus(0, st:departement)
                filter us:focus("undef", st:region)
                bind (00 as ?dep)
                bind (?pays as ?deptName)
                bind (?pays as ?dept)
                bind (?pays as ?region)
                bind (?pays as ?regionName)
                filter us:compute(?deptName, st:get(key:dname))
                filter us:compute(?regionName, st:get(key:rname))
                }"""
.
    
st:contextPattern st:name "$defcontext$" ;
st:pattern """# param = (departement value region value key value)
            bind (us:extract("param") as ?tmp)"""
.
    
st:paramPattern st:name "$defparam$" ;
st:pattern """# param = (departement value region value key value)
            bind (st:get(key:departement) as ?deptList)
            bind (st:get(key:region)      as ?regionList)
            bind (st:get(key:pays)        as ?paysList)
            bind (maplist(rq:uri, st:get(key:commune))       as ?comURLList)
            bind (maplist(xsd:integer, st:get(key:altitude)) as ?altList)
            bind (st:get(key:label)       as ?labelList)
            bind (st:get(key:name) as ?nameList)"""
.

st:coordPattern st:name "$coord$" ;
st:pattern """# (rq:oper value) -- after defparam and lon lat
            filter coalesce(us:eval(?lat, st:get(key:lat)), true)
            filter coalesce(us:eval(?lon, st:get(key:lon)), true)"""
.            


st:iconPattern st:name "$icon$" ;
st:pattern """?url map:commune ?acom . ?acom rdfs:label ?clabel 
            optional { ?url map:image ?img }
            optional { ?url map:document ?doc} 
            optional { ?acom map:geoname ?geo }
            optional { ?acom map:wikipedia ?wikipedia }
            filter if (coalesce(st:get(key:image) != xt:list("Sans"), false), bound(?img), true)
            bind (st:format(ft:document.html, ?doc, us:docTitle(?doc)) as ?adoc)
            bind (coalesce(?adoc, "") as ?fdoc)
            bind (coalesce(?wikipedia, concat(wiki:, ?clabel)) as ?wiki)
            bind (st:format(ft:img.html, coalesce(?img, "undef"), us:height()) as ?fimg)
            bind (st:format(ft:document.html, ?geo,  us:docTitle(?geo))  as ?ogeo)
            bind (st:format(ft:document.html, ?wiki, us:docTitle(?wiki)) as ?owiki)
            bind (coalesce(concat(?ogeo, ?owiki), ?owiki) as ?fgeo)
            """
.

#
# html select definition
# st:get("param") = (key_1 value_1 key_2 value_2)
# st:get(key:key_i)  = (value_i)
# st:name param is the name of the key for using st:get(param) and retreiving the value of
# the parameter value list in the context in  the query
# st:key key is the name of the key for using st:get(key) after us:extract(st:get(param)) 
# and retreiving the value of the key value list in the context in  the query
#
st:defCommune  st:title "Commune" ;     st:default "" ; st:defaultLabel "Any" ; st:key key:commune ;
st:name "param" ;  st:function us:selectCommune .

st:defCommuneURL  st:title "Commune" ;     st:default "" ; st:defaultLabel "Any" ; st:key key:commune ; 
st:name "param" ;  st:function us:selectCommuneURL .

st:defCommuneBasic  st:title "Commune" ;  st:key key:commune ;
st:name "param" ;  st:function us:selectCommune .

st:defCommuneURLBasic  st:title "Commune" ;  st:key key:commune ; 
st:name "param" ;  st:function us:selectCommuneURL .

st:defDepartement st:title "Departement" ; st:default "" ; st:defaultLabel "Any" ; st:key key:departement ;
st:name "param" ;  st:function us:selectDepartment .

st:defRegion st:title "Region" ;  st:default "" ; st:defaultLabel "Any" ; st:key key:region ;
st:name "param" ;  st:function us:selectRegion .

st:defPays st:title "Pays" ;  st:default "" ; st:defaultLabel "Any" ; st:key key:pays ;
st:name "param" ;  st:function us:selectPays .


st:defLabelNature st:title "Label" ;  st:default "" ; st:defaultLabel "Any" ; st:key key:label ;
st:name "param" ;  st:function us:selectLabelNature .

st:defLabelArtefact st:title "Label" ;  st:default "" ; st:defaultLabel "Any" ; st:key key:label ;
st:name "param" ;  st:function us:selectLabelArtefact .

st:defLabel st:title "Label" ;  st:default "" ; st:defaultLabel "Any" ; st:key key:label ;
st:name "param" ;  st:function us:selectLabel .

st:defLabelBasic st:title "Label" ;  st:key key:label ; st:name "param" ;  st:function us:selectLabel .


st:defClassArg  st:default map:Undefined ; st:defaultLabel "Any" ; st:kind st:arg ;
st:name "mode" ; st:function us:selectType ; st:strip true .


st:defOperType st:title "Type" ; st:kind st:oper ; st:name "mode" ; st:value st:operlist .

st:defOperTypeRepeat2 st:title "Type" ; st:kind st:oper ; st:repeat 2 ; st:name "mode" ; st:value st:operlist .


st:defCommuneTextOper st:kind st:oper ; st:title "Commune" ; st:name "param" ; st:key key:cname ; st:value st:textoper ; st:strip true 
st:defCommuneTextArg   st:kind st:arg; st:type st:text ;      st:name "param" ; st:key key:cname .

st:defDepartementTextOper st:kind st:oper ; st:title "Departement" ; st:name "param" ; st:key key:dname ;  st:value st:textoper; st:strip true .
st:defDepartementTextArg   st:kind st:arg; st:type st:text ;          st:name "param" ; st:key key:dname .

st:defRegionTextOper st:kind st:oper ; st:title "Region" ; st:name "param" ; st:key key:rname ; st:value st:textoper ; st:strip true .
st:defRegionTextArg  st:kind st:arg; st:type st:text ;     st:name "param" ; st:key key:rname .

st:defPaysTextOper st:kind st:oper ; st:title "Pays" ; st:name "param" ; st:key key:pname ; st:value st:textoper ; st:strip true .
st:defPaysTextArg   st:kind st:arg; st:type st:text ;   st:name "param" ; st:key key:pname .

st:defLabelTextOper st:kind st:oper ; st:title "Label" ; st:name "param" ; st:key key:name ;  st:value st:textoper ; st:strip true .
st:defLabelTextArg  st:kind st:arg; st:type st:text ;     st:name "param" ; st:key key:name .


st:textoper st:enum (rq:contains us:notContains rq:regex rq:strstarts) .



# special parameter with key "show" and id "show" to record the value of show/hide button
# show/hide button set the value of this html select (with id = "show") with value "more" or "less"
# see format form.html
# used by myweb.rul to show/hide html elements with id from st:hide
st:defShow st:title "Show"  ; st:name "param" ; st:key key:show ; st:value ("less" "more") .

# by default query is hidden
st:defShowQuery st:title "Show Query"  ; st:name "param" ; st:key key:text ; st:value ("false" "true") .
# by default query is shown
st:defShowQuery2 st:title "Show Query"  ; st:name "param" ; st:key key:text ; st:value ("true" "false") .


st:operlist st:enum ("AND" "OR" "UNION" "AND_NOT" "OR_NOT" "UNION_NOT") .
 
st:operlist2 st:enum ("AND" "OR" "UNION" "AND_NOT" "UNION_NOT") .

# 
# accept (or not) site without image
st:defImage st:title "Image" ; st:name "param" ; st:key key:image ; st:type st:radio ;
st:value ("Avec" "Sans") .


st:zoom1 st:enum (0.1 0.25 0.5 0.75 1 1.5 2 4 0.01 0.05)
.

st:zoom st:enum ((0.1 10) (0.25 25) (0.5 50) (0.75 75) 
(1 100) (1.5 150) (2  200) (3 350) (4 450) (6 650) (9 1000) (0.01 1) (0.05 5))
.

# after us:extract: st:get(key:lat) = (rq:eq value)
#
st:operlat st:title "Latitude" ; st:name "param" ; st:kind st:oper ;
st:key key:lat ; st:value st:opercoord ; st:strip true .

st:operlon st:title "Longitude" ; st:name "param" ; st:kind st:oper ;
st:key key:lon ; st:value st:opercoord ; st:strip true .

st:arglat  st:name "param" ; st:kind st:arg ; st:key key:lat ; st:function us:selectLatitude .

st:arglon  st:name "param" ; st:kind st:arg ; st:key key:lon ; st:function us:selectLongitude .

st:opercoord st:enum (us:any rq:le us:close us:near us:around rq:ge) .
st:opereval  st:enum (rq:le us:eq us:close rq:ge) .

st:operdist st:title "Distance (km)" ; st:name "param" ; st:kind st:oper ;
st:key key:distance ; st:value st:opereval ; st:strip true .

st:argdist  st:name "param" ; st:kind st:arg ; st:key key:distance ; st:value st:zoom .

#
# This query takes as input mode parameter a list of classes with boolean conenctors
# Parameter param is a key value list (commune value departement value region value label value)
# key value are extracted and managed in Context with st:set/st:get
#
# query pattern $type$ processed by myweb.rul using function us:expand
# replace occurrence of $type$ by value of st:pattern in query
#

st:genQueryURL st:value
"""$prefix$

template {
    format { ft:format.html
        group { format { ft:titlerow.html  st:number() ?comLabel ?deptName str(?dep)  ?fgeo  ?row } }
    }
}
where {
select ?comLabel ?deptName ?dep ?com ?fgeo
(aggregate (distinct xt:list(?fimg, ?label, ?comLabel, ?fdoc, ?umap, ?lat, ?lon, ?data)) as ?alist)
(maplist (us:formatData, us:number(?alist)) as ?flist)
(reduce (rq:concat, ?flist) as ?row)
where {
    $defcontext$
    bind (st:get(st:umap) as ?umap)
    service <store:mapdatamanager> {
        select distinct * where {
        
            $type$                  
            $defparam$
            
            ?url geo:long ?lon ; geo:lat ?lat .
            
            $coord$
            
            ?url rdfs:label ?label 
            filter coalesce(us:compute(?label, ?nameList), true)
            ?url map:commune ?com . 
            ?com rdfs:label ?comLabel
            filter us:match(?label, ?labelList)
            filter us:match(?com, ?comURLList)
            filter us:compute(?comLabel, st:get(key:cname))
            $region$            
            optional { ?url map:altitude ?oalt }
            bind (coalesce (?oalt, 0) as ?alt)
            filter if (xt:size(?altList) > 0, ?alt >= xt:first(?altList), true)
            $icon$
            bind (coalesce(st:format("Altitude: %s m", ?oalt), "") as ?data)
        }
        order by (if (bound(?img), 0, 1)) ?label
    }
}
group by ?dep ?com
order by ?deptName ?com
}
""" 
.



st:genQueryPositionLabel st:value
"""$prefix$

template {
format { ft:format.html
    group { format { ft:titlerow.html  st:number() ?comLabel ?deptName str(?dep) ?fgeo  ?row } }
}}
where {
select ?com ?comLabel ?deptName ?dep ?fgeo
(aggregate (distinct xt:list(?fimg, ?label, ?comLabel, ?fdoc, ?umap, ?lat, ?lon, ?data)) as ?alist)
(maplist (us:formatData, us:number(?alist)) as ?flist)
(reduce (rq:concat, ?flist) as ?row)
where {
    #bind (if ($arg <=0.1, st:get(st:umap1), st:get(st:umap2)) as ?umap)
    bind (st:get(st:umap1) as ?umap)
    $defcontext$
    
    service <store:mapdatamanager> {
        select * (min(?distance) as ?dist)
            (st:format("Distance: %s km", xt:format("%1$.1f", 111*?dist)) as ?data)
        where {        
            $type$                
            $defparam$
            
            ?url rdfs:label ?label ; map:commune ?com . 
            ?com rdfs:label ?comLabel
            filter us:match(?com, ?comURLList)
            
            # find place with label 
            ?place rdfs:label ?aname 
            filter us:match(?aname, st:get(key:label))
            ?place geo:long ?alon ; geo:lat ?alat
            
            # find other sites close to place with label
            ?url geo:long ?lon ; geo:lat ?lat .
            bind (us:distance(?alat, ?alon, ?lat, ?lon) as ?distance)
           # filter (?distance <= $arg)
           # st:get(key:distance) = (oper value) -> eval(oper(distance, value))
            filter coalesce(us:eval(?distance, st:get(key:distance)), true)
            
            $region$                                   
            $icon$
        }
        # because there may be several place with same label
        # we keep one occurrence of each url
        group by ?fimg ?label ?com ?fdoc  ?lat ?lon
        order by (if (bound(?img), 0, 1)) ?label
    }
}
group by ?dep ?com
order by ?deptName ?com
}
""" 
.



st:genQueryPositionCom st:value
"""$prefix$

template {
format { ft:format.html
    group { format { ft:titlerow.html  st:number() ?comLabel ?deptName str(?dep) ?fgeo   ?row } }
}}
where {
select ?com ?comLabel ?deptName ?dep ?fgeo
(aggregate (distinct xt:list(?fimg, ?label, ?comLabel, ?fdoc, ?umap, ?lat, ?lon, ?data)) as ?alist)
(maplist (us:formatData, us:number(?alist)) as ?flist)
(reduce (rq:concat, ?flist) as ?row)
where {
    #bind (if ($arg <= 0.1, st:get(st:umap1), st:get(st:umap2)) as ?umap)
    
    bind (st:get(st:umap1) as ?umap)
    $defcontext$
    
    service <store:mapdatamanager> {
        select distinct * where {        
            $type$                           
            $defparam$
            
            ?url rdfs:label ?label ; map:commune ?com .
            ?com rdfs:label ?comLabel
            
            values ?closeCom { unnest(?comURLList) }
            ?closeCom rdfs:label ?pname . 
            bind (strlang(?pname, "fr") as ?fname)
            
            {select * where {
                service <http://fr.dbpedia.org/sparql?mode=debug> {
                    select distinct * {
                        {?place foaf:name ?fname}
                        union 
                        {?place rdfs:label ?fname}
                        
                        ?place (dbo:wikiPageRedirects|dbo:wikiPageDisambiguates)? ?loc .
                        ?loc a dbo:Settlement 
                        
                        graph <http://fr.dbpedia.org/graph/dbpedia_wikidata_geo-coordinates> {
                            ?loc geo:long ?alon ; geo:lat ?alat 
                        }
                        optional {
                            ?loc dbo:department/dbo:inseeCode ?acode
                            filter (strlen(?acode) > 0)
                        }
                    }
                }
            } }
            
            ?closeCom map:departement ?depCode
            filter (str(?depCode) = ?acode || ?depCode=0 && ! bound(?acode))
          
            # find sites close to commune
            ?url geo:long ?lon ; geo:lat ?lat .
            bind (us:distance(?alat, ?alon, ?lat, ?lon) as ?distance)
            #filter (?distance <= $arg)
            filter coalesce(us:eval(?distance, st:get(key:distance)), true)
            
            $coord$

            optional { ?url map:altitude ?alt }
            
            bind (st:format("Altitude: %s m", ?alt) as ?data1) 
            # 1 degree ~= 111km
            bind (st:format("Distance: %s km", xt:format("%1$.1f", 111*?distance)) as ?data2)            
            bind (coalesce(concat(?data1, "<br/>", ?data2), ?data2) as ?data)
            
            $region$                  
            $icon$
        }
        order by (if (bound(?img), 0, 1)) ?label
    }
}
group by ?dep ?com
order by ?deptName ?com
}
""" 
.



st:queryLocalisation st:value
"""$prefix$

template {
format { ft:format.html
    group { format { ft:titlerow.html  st:number() ?comLabel ?deptName str(?dep) ?fgeo   ?row } }
}}
where {
select ?com ?comLabel ?deptName ?dep ?fgeo
(aggregate (distinct xt:list(?fimg, ?label, ?comLabel, ?fdoc, ?umap, ?lat, ?lon)) as ?alist)
(maplist (us:format, us:number(?alist)) as ?flist)
(reduce (rq:concat, ?flist) as ?row)
where {
    $defcontext$
    service <store:mapdatamanager> {
        select distinct * where {
          bind (st:get(st:umap) as ?umap)          
          $type$            
          $defparam$
            
            ?url rdfs:label ?label ; map:commune ?com .  
            ?com rdfs:label ?comLabel
            ?url geo:long ?lon ; geo:lat ?lat .
            filter us:match(?com, ?comURLList)
            filter us:match(?label, ?labelList)
            
           $region$          
            
           {select distinct ?url where {
                bind (us:process(maplist(rq:uri, st:get("arg"))) as ?argList)
                values ?locList { unnest(?argList) }                
                bind (xt:first(?locList) as ?fstLoc)
                
                ?url map:localisation/rdfs:subClassOf* ?fstLoc .

                filter not exists {
                    values ?loc { unnest(xt:rest(?locList)) }
                    filter if (isURI(?loc), 
                        not exists {?url map:localisation/rdfs:subClassOf* ?loc}, 
                        # (<NOT> location) 
                        exists { bind (xt:first(xt:rest(?loc)) as ?aloc) 
                            ?url map:localisation/rdfs:subClassOf* ?aloc})                 
                }            
            }}
            
            $icon$
        }
        order by (if (bound(?img), 0, 1)) ?label
    }
}
group by ?dep ?com
order by ?deptName ?com
}
""" 
.





#
# SPARQL Query
#


st:sparqlQuery st:value
"""$prefix$

select *
where {
    bind (st:get(st:umap) as ?umap)
    $defcontext$
    service <store:mapdatamanager> {
        select  * (aggregate(?type) as ?typeList)
        where {
        
            $type$   
            ?url geo:long ?lon ; geo:lat ?lat .
            ?url a ?type
               
            $defparam$
            
            ?url rdfs:label ?label ; map:commune ?com . 
            ?com rdfs:label ?comLabel
            filter us:match(?label, ?labelList)
            filter us:match(?com, ?comURLList)
            $region$  
            filter (coalesce(st:get(st:region), false) || not exists { ?region a map:Abstract })
            optional { ?url map:altitude ?oalt }
            bind (coalesce (?oalt, 0) as ?alt)
            filter if (xt:size(?altList) > 0, ?alt >= xt:first(?altList), true)
        }
        group by  ?url
    }
}
order by ?deptName ?com ?label
""" 
.






st:indexNature a sw:Query ;
st:name st:indexNature ;
rdfs:label "Map Index Nature" ;
rdfs:comment """Select resource by type, department, region. UNION operator is like OR but UNION has precedence over AND: A UNION B AND C ::= (A OR B) AND C."""@en ;

st:query st:genQueryURL ;

st:select [ st:title "Type" ; st:default map:Cavité ; st:defaultLabel "Cavité" ;
st:name "mode" ;   st:function us:selectTypeNature ; st:strip true ] ;

st:select [ st:select st:defOperType ] ;

st:select [  st:default map:Résurgence ; st:defaultLabel "Résurgence" ; st:kind st:arg ;
st:name "mode" ;   st:function us:selectTypeNature ; st:strip true ] ;

# st:hide generate an id used to show/hide html elements with button show/hide
# see myweb.rule
st:select [ st:select st:defOperType ; st:hide true ], [ st:select st:defClassArg ] ;

st:select [st:select st:defCommuneURL ] ;
st:select [st:select st:defDepartement ] ;
st:select [st:select st:defRegion] ;
st:select [st:select st:defPays ; st:hide true] ;
st:select [st:select st:defLabelNature ] ;
st:select [st:select st:defAltitude ; st:hide true];
st:select [st:select st:defImage ; st:hide true] ;

# special parameter key "show" to record the value of show/hide button 
# this select is hidden in html form user interface
st:select [ st:hidden true; st:select st:defShow ; st:id "show"];
st:select [ st:hidden true; st:select st:defShowQuery ; st:id "text"]
.
 

st:defAltitude st:title "Altitude" ; st:name "param" ; st:key key:altitude ;
st:value (0 1000 2000 3000 4000 5000) 
.
 
 

st:indexArtefact a sw:Query ;
st:name st:indexArtefact ;
rdfs:label "Map Index Artefact" ;
rdfs:comment """Select resource by type, department, region."""@en ;

st:query st:genQueryURL ;

st:select [ st:title "Type" ; st:default map:Ouvrage ; st:defaultLabel "Ouvrage" ; 
st:name "mode" ;   st:function us:selectTypeArtefact ; st:strip true] ;

# OPER

st:select [ st:title "Type" ; st:default "UNION" ; st:defaultLabel "UNION" ; st:kind st:oper ;
st:name "mode" ;   st:value st:operlist ] ;

st:select [  st:default map:Bâtiment ; st:defaultLabel "Bâtiment" ; st:kind st:arg ;
st:name "mode" ;   st:function us:selectTypeArtefact ; st:strip true ] ;

st:select [ st:select st:defOperType ] ;

st:select [  st:default map:Antiquité ; st:defaultLabel "Antiquité" ; st:kind st:arg ;
st:name "mode" ;  st:function us:selectType ; st:strip true  ] ;

st:select [st:select st:defCommuneURL ] ;
st:select [st:select st:defDepartement ] ;
st:select [st:select st:defRegion ] ;
st:select [st:select st:defPays ; st:hide true] ;
st:select [st:select st:defLabelArtefact ] ;
st:select [st:select st:defImage ; st:hide true] ;

# special parameter key "show" to record the value of show/hide button 
# this select is hidden in html form user interface
st:select [ st:hidden true; st:select st:defShow ; st:id "show"];
st:select [ st:hidden true; st:select st:defShowQuery ; st:id "text"]
.


st:defType st:title "Type" ; st:default map:Objet ; st:defaultLabel "Objet" ; 
st:name "mode" ;  st:function us:selectType ; st:strip true  
#; st:onChange """document.getElementById('cname').value = this.value;"""
.


st:indexAll a sw:Query ;
st:name st:indexAll ;
rdfs:label "Map Index Any" ;
rdfs:comment """Select resource by type, department, region."""@en ;

st:query st:genQueryURL ;

st:select [ st:select st:defType  ; st:id "idtyp"] ;

st:select [ st:select st:defOperType ; st:hide true], [ st:select st:defClassArg ; st:id "idtyp2"] ;
st:select [ st:select st:defOperType ; st:hide true], [ st:select st:defClassArg ; st:id "idtyp3"] ;

st:select [st:select st:defCommuneURL  ; st:id "idcom";] ;
st:select [st:select st:defDepartement ; st:id "iddep"] ;
st:select [st:select st:defRegion ; st:id "idreg"] ;
st:select [st:select st:defPays; st:hide true ; st:id "idpay"] ;
st:select [st:select st:defLabel ; st:id "idlab"] ;


st:select [ st:select st:defCommuneTextOper; st:id "ocname"] ,      [ st:select st:defCommuneTextArg ; st:id "cname" ] ;
st:select [ st:select st:defDepartementTextOper; st:id "odname"] ,  [ st:select st:defDepartementTextArg ; st:id "dname" ] ;
st:select [ st:select st:defRegionTextOper; st:id "orname"] ,       [ st:select st:defRegionTextArg ; st:id "rname" ] ;
st:select [ st:select st:defPaysTextOper; st:id "opname"] ,         [ st:select st:defPaysTextArg ; st:id "pname"] ;
st:select [ st:select st:defLabelTextOper; si:id "olname"] ,        [ st:select st:defLabelTextArg ; st:id "lname" ] ;

st:select [ st:select st:operlat ; st:hide true], [ st:select st:arglat ] ;
st:select [ st:select st:operlat ; st:hide true], [ st:select st:arglat ] ;
st:select [ st:select st:operlon ; st:hide true], [ st:select st:arglon ] ;
st:select [ st:select st:operlon ; st:hide true], [ st:select st:arglon ] ;


st:select [ st:hide true ; st:select [st:type st:radio ; st:title "Image Size"; st:name "param"; st:key key:height ; 
st:onChange """setimgsize(this.value)""";
st:value ("120" "200" "300" "400" "500")]];

st:select [st:select st:defImage; st:hide true] ;

st:select [ st:hide true ; st:select [st:type st:box ; st:title "Trace"; st:name "param"; st:key key:trace ; 
st:value "true" ]];

# special parameter key:show to record the value of show/hide button 
# this select is hidden in html form user interface
st:select [ st:hidden true; st:select st:defShow ; st:id "show" ];
st:select [ st:hidden true; st:select st:defShowQuery ; st:id "text" ] ;



st:button [ st:name "Info" ; st:onClick """info()""" ; st:hide true];

st:button [ st:name "Set Text" ;   st:hide true; st:onClick "settext()"  ] ;
st:button [ st:name "Reset Text" ; st:hide true; st:onClick "resettext();resettextoper()"  ] ;

st:button [ st:name "Set Select" ;   st:hide true; st:onClick "setselect()"  ] ;
st:button [ st:name "Reset Select" ; st:hide true; st:onClick "resetselect()"  ] ;

.





st:indexQuery a sw:Query ;
st:name st:indexQuery ;
rdfs:label "Map Index Any" ;
rdfs:comment """Select resource by type, department, region."""@en ;

st:query st:genQueryURL ;

st:select [ st:title "Type" ; st:default map:Objet ; st:defaultLabel "Objet" ; 
st:name "mode" ;  st:function us:selectType ; st:strip true ] ;
.





st:indexPositionLabel a sw:Query ;
st:name st:indexPositionLabel ;
rdfs:label "Map Index Position Label" ;
rdfs:comment """Select resources by proximity of a resource with given label and also by type, commune, department, region."""@en ;

st:query st:genQueryPositionLabel ;

st:select [ st:title "Type" ; st:default map:Objet ; st:defaultLabel "Any" ; 
st:name "mode" ;  st:function us:selectType ; st:strip true ] ;

st:select [ st:select st:defOperType ; st:hide true], [ st:select st:defClassArg ] ;

st:select [st:select st:defCommuneURL ] ;
st:select [st:select st:defDepartement ] ;
st:select [st:select st:defRegion] ;
st:select [st:select st:defPays; st:hide true] ;
st:select [st:select st:defLabelBasic ] ;
st:select [st:select st:defImage; st:hide true] ;

st:select [ st:select st:operdist ], [ st:select st:argdist ] ;

# special parameter key "show" to record the value of show/hide button 
# this select is hidden in html form user interface
st:select [ st:hidden true; st:select st:defShow ; st:id "show"];
st:select [ st:hidden true; st:select st:defShowQuery ; st:id "text"]
.



st:indexPositionCom a sw:Query ;
st:name st:indexPositionCom ;
rdfs:label "Map Index Position Commune" ;
rdfs:comment """Select resources by proximity of a commune and also by type, department, region."""@en ;

st:query st:genQueryPositionCom ;

st:select [ st:title "Type" ; st:default map:Objet ; st:defaultLabel "Any" ; 
st:name "mode" ;  st:function us:selectType ; st:strip true ] ;

st:select [ st:select st:defOperType ; st:hide true], [ st:select st:defClassArg ] ;

st:select [st:select st:defCommuneURLBasic ] ;
st:select [st:select st:defDepartement ] ;
st:select [st:select st:defRegion] ;
st:select [st:select st:defPays; st:hide true] ;
st:select [st:select st:defImage; st:hide true] ;

st:select [ st:select st:operlat ; st:hide true], [ st:select st:arglat ] ;
st:select [ st:select st:operlon ; st:hide true], [ st:select st:arglon ] ;

st:select [ st:select st:operdist ], [ st:select st:argdist ] ;

# special parameter key "show" to record the value of show/hide button 
# this select is hidden in html form user interface
st:select [ st:hidden true; st:select st:defShow ; st:id "show"];
st:select [ st:hidden true; st:select st:defShowQuery ; st:id "text"]
.





st:localisationType a sw:Query ;
st:name st:localisationType ;
rdfs:label "Map Index Localisation" ;
rdfs:comment """Select resource by semantic location, type, commune, department, region, label."""@en ;

st:query st:queryLocalisation ;

st:select [ st:title "Type" ; st:default map:Cavité ; st:defaultLabel "Cavité" ;
st:name "mode" ;   st:function us:selectTypeNature ; st:strip true ] ;

# OPER

st:select [ st:select st:defOperType ] ;

st:select [  st:default map:Résurgence ; st:defaultLabel "Résurgence" ; st:kind st:arg ; st:name "mode" ;  st:function us:selectTypeNature ; st:strip true ] ;

st:select [ st:select st:defOperType ; st:hide true] , [ st:select st:defClassArg ] ;


st:select [ st:title "Localisation" ; st:default map:BassinSiagne ; st:defaultLabel "Bassin de la Siagne" ;
st:name "arg" ;  st:function us:selectLocalisation ; st:strip true] ;

st:select [ st:hide true ; st:select 
[st:title "Localisation" ; st:kind st:oper ; st:name "arg" ; st:value st:operlist ] ] ;

st:select [  st:kind st:arg ; st:default map:Undefined ; st:defaultLabel "Any" ;
st:name "arg" ;  st:function us:selectLocalisation ; st:strip true] ;

st:select [st:select st:defCommuneURL ] ;
st:select [st:select st:defDepartement ] ;
st:select [st:select st:defRegion] ;
st:select [st:select st:defPays ; st:hide true] ;
st:select [st:select st:defLabel ; st:hide true] 
.




st:indexSPARQL a sw:Query ;
st:name st:indexSPARQL ;
rdfs:label "Map SPARQL Query" ;
rdfs:comment """Select resource by type, department, region."""@en ;

st:query st:sparqlQuery ;

st:select [ st:title "Type" ; st:default map:Objet ; st:defaultLabel "Objet" ; 
st:name "mode" ;  st:function us:selectType ; st:strip true ] ;

st:select [ st:select st:defOperTypeRepeat2 ] ;
st:select [ st:select st:defClassArg ] ;

st:select [st:select st:defCommuneURL ] ;
st:select [st:select st:defDepartement ] ;
st:select [st:select st:defRegion ] ;
st:select [st:select st:defPays] ;
st:select [st:select st:defLabel ] ;
st:select [st:select st:defImage] 

.












 
 
st:query a sw:Query ;
st:name st:query ;
rdfs:label "Map Query" ;
rdfs:comment """Select resource by type."""@en ;
rdfs:comment """Simple"""@fr ;

st:query 
"""#
# Generate a map with corese server 
# from json map format
# query = insert.rq
# map = map.json
#
prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
prefix map: <http://ns.inria.fr/map/>
prefix dbo: <http://dbpedia.org/ontology/> .

select ?url ?mapURL ?label ?t ?dept ?region ?com ?pays ?lon ?lat 
where {
service <store:mapdatamanager> {
    select * where {
        ?url rdfs:label ?label 
        ?url geo:long ?lon;
            geo:lat ?lat  .
        
        ?url map:commune ?com .
        ?com rdfs:label ?comLabel ; map:departement ?dep 
        
        optional {
            ?department dbo:inseeCode ?dep ; rdfs:label ?dept 
            #filter regex(?dept, "$param")

            optional {
                ?department dbo:hasRegion ?reg .
                ?reg rdfs:label ?region
                #filter regex(?region, "$arg")
        }}
        
                bind (strlang(?comLabel, "fr") as ?fname)
    optional {
                service <http://fr.dbpedia.org/sparql?mode=debug> {
                    select distinct * {
                        ?place foaf:name ?fname .
                        ?place (dbo:wikiPageDisambiguates|dbo:wikiPageRedirects)? ?loc .
                        ?loc a dbo:Settlement ; 
                            geo:long ?alon ; geo:lat ?alat
                            
                    }
                }
      }    
        filter (!bound(?alat))
        
        
        ?com map:pays ?pays .
                
        ?url rdf:type/rdfs:subClassOf* $mode .
        ?url rdf:type ?t .
        bind (uri(st:format("http://umap.openstreetmap.fr/fr/map/provence-alpes_455480#%s/%s/%s", 15, ?lat, ?lon)) as ?mapURL)
        
        #filter mapany(xt:contains, ?deptName, xt:list("Chapelle", "Eglise", "Abbaye"))        
        #filter contains(?com, "Saint")
        #filter not exists {?t rdfs:subClassOf* map:Objet} .
}
}
}
""" ;

st:select st:selectType ;
#st:select st:selectDepartement ;
#st:select st:selectRegion

.






st:count a sw:Query ;
st:name st:count ;
rdfs:label "Map Query Count" ;
rdfs:comment """Count resource by type."""@en ;

st:query 
"""$prefix$
select $arg (count(distinct ?url) as ?c)
where {
    $defcontext$
service <store:mapdatamanager> {
    select * where {
        $type$
        $defparam$
        $region$
        
        ?url rdfs:label ?label ; rdf:type ?type        
        ?url geo:long ?lon;
            geo:lat ?lat  .
        ?url map:commune ?com . 
        ?com rdfs:label ?comLabel
        filter us:match(?com, ?comURLList)
        bind (xsd:integer(?lat) as ?ilat)
        bind (xsd:integer(?lon) as ?ilon)
    }
}
}
group by $arg
order by desc(?c)

""" ;
st:select [ st:title "Type" ; st:default map:Objet ; st:defaultLabel "Objet" ; 
st:name "mode" ;  st:function us:selectType ; st:strip true ] ;

st:select [st:select st:defCommuneURL ] ;
st:select [st:select st:defDepartement ] ;
st:select [st:select st:defRegion ] ;
st:select [st:select st:defPays] ;
st:select [st:select st:defLabel ] ;

st:select [ st:select [
    st:title "Group by" ; st:name "arg" ; st:value ("?type" "?com" "?deptName" "?regionName" "?pays" "?label" "?ilat" "?ilon")
]]

.



























