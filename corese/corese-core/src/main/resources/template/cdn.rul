<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Fri Jun 21 14:24:37 CEST 2019
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://ns.inria.fr/sparql-template/'>
<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
prefix ft: <http://ns.inria.fr/sparql-template/format/cdn/>
template cn:body(?c) {
 
 format { ft:body.html

  st:call-template(cn:rowtitle, ?c)    
  st:call-template(cn:table, ?min, ?max)

}   
}  
where {
   ?c cn:start ?min ; cn:finish ?max 
}

    
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
template cn:img(?i) {
  "<img width='75' src=\"" ?i "\"/>" 
}
where {
#  bind(?u as ?uri)
#  bind(?t as ?text)
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix ft: <http://ns.inria.fr/sparql-template/format/cdn/>

template  cn:table(?min, ?max) {
format {

  ft:date.html
  
  st:call-template(cn:wikidate, ?d)
  st:call-template(cn:row, ?d)
}
}
where {
  {select distinct ?d  where {
    values ?p { cn:date cn:begin } 
    ?uri ?p ?d 
  }}
  filter(?min <= ?d && ?d <= ?max)
}
order by asc(?d)
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>
prefix db: <http://fr.dbpedia.org/resource/>

template st:start {
   
   if (?uri = st:global, 
    st:call-template(cn:global),
    st:call-template(st:substart, ?uri))  
        
}
where {

 bind (coalesce(st:get(st:uri), cn:XIV) as ?uri)

}  

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>

template cn:hlink(?u, ?t) { 
  
  format { "<a href=\"%s\">%s</a>" ?u ?t}

}
where {
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
prefix o:  <http://dbpedia.org/ontology/>

template cn:href(?r, ?u, ?t, ?i) {

  "<div class='margin'>"
  
  if (?img, 
    concat(st:call-template(cn:img, ?i), "<br/>"), 
    "")
    
   if (isURI(?r) && ?isp, 
	st:call-template(st:navlab, ?r, ?t),
	st:call-template(cn:hlink, ?u, ?t))

  "</div>"
}
where {

  bind ( exists { ?r a ?tt . filter (?tt in (foaf:Person, o:Place)) 
  } as ?isp )
  
  bind (bound(?i) && strstarts(?i, "http://") as ?img)
  
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>

template  cn:date(?date, ?topic) {

  group { ?uri ; separator = "<br/>" } 

}
where {

 graph ?g { [] cn:topic ?topic . 
	    { ?uri cn:date ?date } union { ?uri cn:begin ?date }
	  }
 
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix ft: <http://ns.inria.fr/sparql-template/format/dbedit/>

template st:profile {

}
where {}

function st:process(?x) {
    if (isLiteral(?x), xsd:string(?x), st:apply-templates(?x))
  }
    
function st:default(?x) { 
    xsd:string(?x)
}
       
function st:misc(?name) { 
    st:protocol(
      concat(st:get(st:service), "?name=", st:get(st:server), ?name, "&profile=st:sparql"))
      #"&transform=st:sparql%23core&profile=st:dbpedia"))
}
  

#
# Generation of HTML table  
#
function us:table(list, size) {
 let (table  = us:split(list, size)) {
     st:format(ft:table.html, 
      letdyn (n = 0){
	    us:mapconcat (lambda(row) {
	      st:format(ft:tr.html, 
	        set(n = n + 1), 
	        us:mapconcat (lambda(cell) { st:format(ft:td.html, cell) }, row ) )
	    }, table)
	  }
     )
     }
}

function us:mapconcat(fun, exp) {
    reduce(rq:concat, maplist(fun, exp))
}


function us:split(?list, ?n) {
  let (?table = xt:list()) {
    xt:add(?table, xt:list());
    for (?e in ?list) {
      if (xt:size(xt:first(?table)) = ?n) {
        xt:add(?table, 0, xt:list())
      } ;
      xt:add(xt:first(?table), ?e)
    } ;
    return (xt:reverse(?table))
  } 
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>
prefix ft: <http://ns.inria.fr/sparql-template/format/cdn/>
template cn:sign {

   st:call-template(cn:icon, cn:icon)
   
   format { ft:sign.html }
   
   now()
}
where {
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2018
#
prefix cn: <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>

template  cn:global {

  st:call-template(cn:head, cn:XX, "XX")

  us:table(aggregate(?cell), 10)

}
where {

    {select * where {
        graph ?g { [] cn:topic ?topic . 
            { ?uri cn:date ?date } union { ?uri cn:begin ?date }
        }
    }
    order by ?date ?topic
    }
    filter xt:print(?uri, ?date)
    bind (st:apply-templates(?uri) as ?cell)

}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
prefix ft: <http://ns.inria.fr/sparql-template/format/cdn/>
template cn:icon {

format {
  ft:icontable.html

  group {
    format {
        ft:icon.html
        ?i ?i 
      }
    }
}

}
where { }

values ?i {


<http://3.bp.blogspot.com/-3tBevLpWI6E/UtK25pLm86I/AAAAAAAADf8/Tvhy3899Iwo/s320/P1060114.JPG>

<http://3.bp.blogspot.com/-glPooGU-Bds/VB3I6Tx7i2I/AAAAAAAAD4E/M-zPk22sl0w/s1600/P1080231.JPG>

<http://2.bp.blogspot.com/-Ff-vEDJ_wt0/UhDrGOTRTWI/AAAAAAAADXI/COMur2r2RFA/s1600/P1050690.JPG>

#<http://upload.wikimedia.org/wikipedia/commons/9/97/Arms_of_the_Prince_of_Piedmont.svg>

#<http://1.bp.blogspot.com/-xfvkf3qpAVk/Ur6oUGkaQpI/AAAAAAAADfI/j1nPxHUle2o/s320/20130720_142348.jpg> 

<http://4.bp.blogspot.com/--IQOU9yw56c/U-NJ_DmGbeI/AAAAAAAADuo/bbA84x01Lrc/s320/P1070402.JPG>

<http://4.bp.blogspot.com/-1ZjNtZQxXDo/U-NJq9ek6FI/AAAAAAAADug/t9fXCId1rQc/s1600/P1070386.JPG>

<http://2.bp.blogspot.com/-NHZ8BEAsovs/U-NI58kXiBI/AAAAAAAADuI/JejEaJq9pM0/s1600/P1070323.JPG>


}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>

template st:navlab(?u, ?t) { 
  
  format { 
    "<a href='%s'>%s</a>" 
    
    st:plink(?u, st:dbpedia) 
    ?t 
  }

}
where {
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:query {
format {
  """
  <h3>Query</h3>
  <form method='post' action='%s'>
    <textarea cols='60' rows='10' name='query'>
    %s    
    </textarea>
    <br/>
    <input type='submit' value='Submit'/>
  </form>
  """
  
  st:get(st:service)
  st:get(st:query)
}
}
where {
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>
prefix db: <http://fr.dbpedia.org/resource/>
template st:substart(?cent) {
   
   st:call-template(cn:content, ?cent) 
   
  # st:call-template-with(st:d3, st:frame, us:dbclean)  

   st:call-template(cn:sign, cn:sign)
   
}
where {
}  


@public
function us:dbclean(?s) {
    if (isURI(?s) && strstarts(?s, db:), replace(?s, db:, "db:"), 
    if (contains(?s, ".gif") || contains(?s, ".JPG") || contains(?s, ".jpg") || contains(?s, ".jpeg") || contains(?s, ".svg") || contains(?s, ".png"), "icon", ?s))
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Get list st:topic from profile.ttl st:param
#
prefix cn: <http://cdn.fr/schema/>
template cn:row(?d) {

  format {
    "<td>%s</td>"
    
    group {
	st:call-template(cn:date, ?d, ?topic)
    } 
  }
  

}
where {  
  values ?topicList { unnest(st:get(st:topic)) }
  bind (kg:number() as ?n)
  values ?topic  { unnest(?topicList) }
}
group by ?topicList
order by ?n
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Hypertext link trigger Corese server 
# Answer using SPARQL Template Transformation
#
prefix cn: <http://cdn.fr/schema/>

template st:servlet {

      st:get(st:service)
      "?query=" 
              
}
where {
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>
prefix ft: <http://ns.inria.fr/sparql-template/format/cdn/>

template cn:tail(?c, ?title) {

format {
    ft:tail.html        
    st:call-template(cn:index,  ?title)        
}
    
}
where {
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Generate Century Index
# Hypertext link may trigger Corese server 
# Answer using SPARQL Template Transformation
#
prefix cn: <http://cdn.fr/schema/>
prefix ft: <http://ns.inria.fr/sparql-template/format/cdn/>

template cn:index(?title) {

format {
  ft:indextable.html

  if (bound(?before), 
    st:format(ft:before.html, st:plink(?before)), 
    "")
    
  st:call-template(cn:elem, ?title) 
  
  if (bound(?after), 
    st:format(ft:after.html, st:plink(?after)), 
    "")  
    
}

st:call-template(cn:list)   

}
where {

  ?century rdfs:label ?title ; 
    cn:start ?min 
       
  bind (if (?min = 1, 0, ?min) - 100 as ?be)
  bind (if (?min = -100, -99, ?min) + 100 as ?af)
  bind (coalesce(st:get(st:min), -1000) as ?fst)
  bind (coalesce(st:get(st:max),  3000) as ?rst)
  
  optional { ?before cn:start ?be filter (?be >= ?fst) }
  optional { ?after  cn:start ?af filter (?af <= ?rst) }
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>
template cn:content(?c) {
  
    st:call-template(cn:head, ?c, ?title)
    
    st:call-template(cn:body, ?c)
   
    st:call-template(cn:tail, ?c, ?title)

}
where {
  ?c rdfs:label ?title
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Generate Century Index
# Hypertext link may trigger Corese server 
# Answer using SPARQL Template Transformation
#
prefix cn: <http://cdn.fr/schema/>
prefix ft: <http://ns.inria.fr/sparql-template/format/cdn/>

template cn:elem(?title) {
  format {
      ft:index.html
  
      st:plink(?century)
      if (?show, "bold", "undefined")
      ?date
  } 
}
where {

  bind (coalesce(st:get(st:min), -1000) as ?fst)
  bind (coalesce(st:get(st:max),  3000) as ?rst)
    
  ?century cn:start ?min ; cn:finish ?max ; rdfs:label ?date
  
  filter (?min >= ?fst && ?max <= ?rst)
  
  bind (?date = ?title as ?show)
     
}
order by ?min
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>

template  cn:wikidate(?d) {

  format {
    "<a href='http://fr.wikipedia.org/wiki/%s'>%s</a>"
    ?d ?d
  }

}
where {

}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn:   <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix o:    <http://dbpedia.org/ontology/>
prefix w:    <http://fr.wikipedia.org/wiki/>
prefix r:    <http://fr.dbpedia.org/resource/>

template cn:test(?p) {
   "<p>" str(?p) "</p>"
   
}
where {

  service <http://fr.dbpedia.org/sparql> {
    select * where {
      ?p a ?t
    } limit 1
  }
  
 
}
pragma {kg:query kg:detail true}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn:   <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix o:    <http://dbpedia.org/ontology/>

template cn:geticon {
   ?ic
}
where {

  service <http://fr.dbpedia.org/sparql> {
    ?in o:thumbnail ?ic
    #       ?in foaf:depiction ?ic
  }
    
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Get list st:period from profile.ttl st:param
#
prefix cn: <http://cdn.fr/schema/>
template cn:rowtitle(?c) {

   format { 
    "<th>%s</th>"
    
    if (?label = "Antiquité", 
    if (?max <= 500, str(?label), "&nbsp;"),
    str(?label))
   }
}  
where {

  ?c cn:start ?min ; cn:finish ?max
   
  bind (unnest(st:get(st:text)) as ?label)
  
}
    
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
prefix ft: <http://ns.inria.fr/sparql-template/format/cdn/>
template cn:list {

format {

  ft:listtable.html
  
  st:plink(<http://fr.dbpedia.org/resource/Nice>, st:dbpedia)
  
  st:format("<td>&nbsp;</td><td><a href='%s'>%s</a></td>", st:plink(st:global), "Global")  

  group {
    format {
      ft:list.html
      
      st:misc(?query)
      str(?title)
    }
  }
  
}
  
}
where {

}
values (?query ?title){
  ("/data/query/cdnplace.rq" 	"Lieu")
  ("/data/query/cdnperson.rq" 	"Personne")
  ("/data/query/cdnfr.rq" 	"France")
  ("/data/query/cdneds.rq" 	"Savoie")
  ("/data/query/cdnmisc.rq" 	"Autre")
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Timeline SPARQL Template - Olivier Corby - 2014
#
prefix cn: <http://cdn.fr/schema/>
prefix ft: <http://ns.inria.fr/sparql-template/format/cdn/>
template cn:head(?c, ?title) {
format {

  ft:head.html
    
    str(?title)
    ?title
    "" #st:call-template(cn:icon, cn:icon)
    st:call-template(cn:index,  ?title)
    }
}
where {
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
template cn:style(?in) {
  if (?d <= 1000, "s09",
  if (?d <= 1100, "s10",
  if (?d <= 1200, "s11",
  if (?d <= 1300, "s12",
  if (?d <= 1400, "s13",
  if (?d <= 1500, "s14",
  if (?d <= 1600, "s15",
  if (?d <= 1700, "s16",
  if (?d <= 1800, "s17",
  if (?d <= 1900, "s18", "s19"))))))))))
}
where {
    bind(?in as ?d)
}
	
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn: <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>

template {
    if (bound(?lnk), 
      st:call-template(cn:href, ?lnk, ?c), 
      ?c)
}
where {

  ?in rdf:rest*/rdf:first ?elem
  
  { ?elem rdfs:label ?c ; cn:link ?lnk }
  union 
  { ?elem rdfs:comment ?c }
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn:   <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix o:    <http://dbpedia.org/ontology/>
prefix w:    <http://fr.wikipedia.org/wiki/>
prefix r:    <http://fr.dbpedia.org/resource/>

template {
    st:call-template(cn:href, 
      ?in, coalesce(?link, ?in), ?mds, ?ic)
        
    coalesce(str(?cc), "")
  
}
where {
  ?in cn:begin ?d ; rdfs:label ?mds .  
  optional { ?in cn:link ?lnk }
  optional { ?in st:icon ?ii }
  optional { ?in rdfs:comment ?cc }
  
  bind (
    if (bound(?ii), ?ii,
    if (isURI(?in), st:call-template(cn:geticon, ?in), "")) 
    as ?ic)
    
   bind (
    if (isURI(?in) && strstarts(?in, r:), 
      concat(w:, (substr(?in, strlen(r:) + 1))),
      ?lnk) 
    as ?link)  
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cn:   <http://cdn.fr/schema/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix o:    <http://dbpedia.org/ontology/>
prefix w:   <http://fr.wikipedia.org/wiki/>
prefix r:   <http://fr.dbpedia.org/resource/>

template {
  if (bound(?link), 
    st:call-template(cn:href, ?in, ?link, ?ctx, ?ic), 
    ?ctx)
  " " ?c " " ?l
  
}
where {

  ?in cn:date ?d ; rdfs:label ?ctx .  
  optional { ?in cn:link ?lnk }
  optional { ?in rdfs:comment ?c }
  optional { ?in cn:list ?l }
  optional { ?in st:icon ?ii }
  
  bind (
    if (bound(?ii), ?ii,
    if (isURI(?in), st:call-template(cn:geticon, ?in), "")) 
    as ?ic)
    
  bind (
    if (isURI(?in) && strstarts(?in, r:), 
      concat(w:, (substr(?in, strlen(r:) + 1))),
      ?lnk) 
    as ?link)
      
}
]]>
</body>
</rule>

</rdf:RDF>
