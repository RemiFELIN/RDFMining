<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Fri Jun 21 13:43:42 CEST 2019
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://ns.inria.fr/sparql-template/'>
<rule>
<body>
<![CDATA[
#
# defaut processing of a variable is 
# st:turtle on URI 
# st:apply-templates on Blank and Literal
# Literals are displayed by st:xsdLiteral  (literalvalue.rq)
# otherwise must use st:turtle explicitely (e.g. cardinality.rq)
#
# Olivier Corby, Wimmics Inria I3S, 2014
#
prefix owlfs: <http://ns.inria.fr/sparql-template/owlfs/>

template st:profile(?in) {
      
}
where {}

function st:process(?in) {
      if (isURI(?in), owlfs:pretty(?in),	
	st:apply-templates(?in))
    } 

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
  if (isBlank(?e), st:nl(), "")
  ?e 
  ; separator = " "
}
where {
  ?in rdf:rest*/rdf:first ?e
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
    if (bound(?t), "DataIntersectionOf", "ObjectIntersectionOf") 
    "(" 
	ibox {
	  ?y  
	}
    ")" 
}
where {
  ?in owl:intersectionOf ?y 
  filter (?y != rdf:nil)
  optional { ?in a ?t  filter(?t = rdfs:Datatype) }
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Olivier Corby - Wimmics Inria I3S - 2013
#
template {
  if (bound(?t1) || bound(?t2), "DataSomeValuesFrom", "ObjectSomeValuesFrom")  
  "(" ?p " " ?z ")"  
}
where {
  ?in owl:someValuesFrom ?z ;
  owl:onProperty ?p .
    optional { ?z a ?t1 filter(?t1 = rdfs:Datatype) }
    optional { ?p a ?t2 filter(?t2 = owl:DatatypeProperty) }
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Olivier Corby - Wimmics Inria I3S - 2013
#
template {}
where {
  ?in a ?t
  filter (strstarts(?t, owl:) 
     || strstarts(?t, rdf:) 
     || strstarts(?t, rdfs:))
}
limit 1
pragma { st:template st:priority 1000 }
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
  xsd:string(?l)
  "(" 
    st:turtle(?n) " " ?p " "  ?c 
  ")"  
}
where {
  ?in owl:onClass ?c ;
    owl:onProperty ?p ;
    ?q  ?n 
}
values (?q ?l) {
  (owl:maxQualifiedCardinality "ObjectMaxCardinality")
  (owl:minQualifiedCardinality "ObjectMinCardinality")
  (owl:qualifiedCardinality    "ObjectExactCardinality")
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
    owl:Thing
}
where {
  ?in owl:intersectionOf ()
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Olivier Corby - Wimmics Inria I3S - 2013
#
template {
  if (bound(?t1) || bound(?t2), "DataAllValuesFrom", "ObjectAllValuesFrom")
  "(" ?p " " ?z ")"  
}
where {
  ?in owl:allValuesFrom ?z;
  owl:onProperty ?p .
    optional { ?z a ?t1 filter(?t1 = rdfs:Datatype) }
    optional { ?p a ?t2 filter(?t2 = owl:DatatypeProperty) }
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
    owl:Nothing
}
where {
  ?in owl:unionOf ()
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
  if (bound(?t), "DataOneOf", "ObjectOneOf")
  "("  ?y ")"  
}
where {
  ?in owl:oneOf ?y 
  optional { ?in a ?t . filter(?t = rdfs:Datatype) }
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
    if (bound(?t), "DataUnionOf", "ObjectUnionOf") 
    "(" 
	ibox {
	  ?y  
	}
    ")" 
}
where {
  ?in owl:unionOf ?y 
  filter (?y != rdf:nil)
  optional { ?in a ?t  filter(?t = rdfs:Datatype) }
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
  "DatatypeRestriction(" ?dt " " 
      group  { 
	?p " " 
	if (isURI(?v), st:turtle(?v), st:apply-templates(?v))
      }
  ")"  
}
where {
  ?in a rdfs:Datatype ;
    owl:onDatatype ?dt ;
    owl:withRestrictions [
      rdf:rest*/rdf:first [ ?p ?v ]
    ]
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
  if (bound(?t), xsd:string(?ld), xsd:string(?lo)) 
    "(" st:turtle(?n) " " ?p ")"  
}
where {
  ?in ?q ?n ;
    owl:onProperty ?p 
    optional { ?p a ?t . filter(?t = owl:DatatypeProperty) }
}
values (?q ?lo ?ld) {
  (owl:cardinality 	"ObjectExactCardinality" "DataExactCardinality")
  (owl:maxCardinality 	"ObjectMaxCardinality"   "DataMaxCardinality")
  (owl:minCardinality 	"ObjectMinCardinality"   "DataMinCardinality")
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
    "ObjectInverseOf(" ?y ")"  
}
where {
  ?in owl:inverseOf ?y 
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Olivier Corby - Wimmics Inria I3S - 2013
#
template {
  st:xsdLiteral(?in)
}
where {
  bind(st:getFocusNode() as ?in)
  filter(isLiteral(?in))
}
pragma { st:template st:priority 1000 }
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
  "ObjectHasSelf(" ?y ")"  
}
where {
  ?in owl:hasSelf true ;
    owl:onProperty ?y 
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
  xsd:string(?l)
  "(" 
    st:turtle(?n) " " ?p " "  ?c 
  ")"  
}
where {
  ?in owl:onDataRange ?c ;
    owl:onProperty ?p ;
    ?q  ?n 
}
values (?q ?l) {
  (owl:maxQualifiedCardinality  "DataMaxCardinality")
  (owl:minQualifiedCardinality  "DataMinCardinality")
  (owl:qualifiedCardinality     "DataExactCardinality")
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
  if (bound(?t), "DataHasValue", "ObjectHasValue") 
  "(" ?y " " ?v ")"  
}
where {
  ?in owl:hasValue ?v ;
    owl:onProperty ?y .
    optional { ?y a ?t  filter (?t = owl:DatatypeProperty) }
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {
  xsd:string(?l) "(" ?y ")"  
}
where {
  ?in ?p ?y
}
values (?p ?l){
(owl:complementOf 	  "ObjectComplementOf")
(owl:datatypeComplementOf "DataComplementOf")
}
]]>
</body>
</rule>

</rdf:RDF>
