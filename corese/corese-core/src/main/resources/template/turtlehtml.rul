<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Mon Jul 08 20:08:23 CEST 2019
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://ns.inria.fr/sparql-template/'>
<rule>
<body>
<![CDATA[
template st:pperrorsp(?in) {

    st:call-template-with(st:pperror, st:start, ?in)

}
where {
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
@prefix sh:   <http://www.w3.org/ns/shacl#> .
template st:startshape {

    st:apply-templates(?x)
    
    ; separator = "\n\n"
}
where {
  
  select distinct ?x where { 
   {?x a sh:ValidationReport} union {?x sh:focusNode ?y}       
    
  } order by bound(?y) ?y
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:link(?uri, ?title) {
   format {
#    us:format("link.html")
"<a href='%s'>%s</a>"    str(?uri) str(?title)
   }
}
where {
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:start {
    if (st:get(st:number, true), 
        st:format("# %s%s", st:number(), st:nl()), "")
        
    st:apply-templates(?x)
    
    ; separator = "\n\n"
}
where {
  
  select distinct ?x where { 
    bind (st:focus() as ?x)
    bind (st:get(st:uri) as ?uri)
    bind (bound(?uri) as ?sort) 
    ?x ?p ?y     
    filter ( 
      isURI(?x) 
      || not exists { ?z ?q ?x }
      || (isBlank(?x) 
	  && (exists { ?a ?q ?x . ?b ?r ?x . filter(?a != ?b) }
	   || exists { ?x ?q ?x }
	  ))
    )
  } 
  order by if (?sort, ?x != ?uri, true) ?x
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:all {
  st:apply-templates(?x)
  ; separator = "\n\n"
}
where {
  select distinct ?x where { 
    ?x ?p ?y 
    filter ( isURI(?x) || not exists { ?z ?q ?x } )
  }
}
order by ?x
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:value {

format {
    if (?p = rdf:type, "<span class='type'>a %2$s</span>", "%s %s")
    
	st:process(?p)  	       
	if (?refer, st:turtle(?y), 
        if (isURI(?y) && ?y = rdf:nil, "()", st:process(?y)))
}
             
   ; separator = concat(" ;", st:nl()) 
}
where {
  ?in ?p ?y 
    
  bind (
    isBlank(?y) 
    && ( (st:isStart() && exists { ?x ?q ?y . filter(?in != ?x) })
         || exists { ?y ?q ?y } 
         || ?in = ?y
       )
  as ?refer)
    
}
order by if (?p = rdf:type, 0, 1) ?p ?y
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:list {
  "(" 
    group { 
      if (?refer, st:turtle(?e), ?e) 
      ; separator = "\n"
    } 
  ")"
  
}
where {
  ?in rdf:rest* ?r
  ?r  rdf:first ?e
  
  bind (isBlank(?e) && 
    ((st:isStart() &&  exists { ?x ?p ?e . filter(?x != ?r) })
    || exists { ?e ?q ?e })
    as ?refer)
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:rdf {
  st:apply-templates(?x)
  ; separator = "\n\n"
}
where {
  select distinct ?x where { 
    ?x ?p ?y 
    minus {
       ?x a ?t . 
       filter(
	    strstarts(?t, rdf:)
	 || strstarts(?t, rdfs:)
	 || strstarts(?t, owl:)
       )
    }
    
    filter ( isURI(?x) || not exists { ?z ?q ?x } )
  }
}
order by ?x
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:rdfs {
  st:apply-templates(?x)
  ; separator = "\n\n"
}
where {
  select distinct ?x where { 
    
       ?x a ?t . 
       filter(
	    strstarts(?t, rdf:)
	 || strstarts(?t, rdfs:)
	 || strstarts(?t, owl:)
       )
    
    filter ( isURI(?x) || not exists { ?z ?q ?x } )
  }
}
order by ?x
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:provenance(?pr) {

  "<img src='/img/smarker.png' onclick='alert(\"" str(?b) "\")'  />"
   
}
where {
  
  bind ( replace(str(?pr), "\n", "\\\\n") as ?b ) 
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# defaut processing of a variable is st:apply-templates 
#
# Olivier Corby, Wimmics Inria I3S, 2014
#
template st:profile {

}
where {}

#
# extended datatype xt:graph is a string which represents a Turtle (sub)graph
# display it as is
#
function st:process(?in) { 
  if (isBlank(?in), st:blank(?in),	  
  if (isURI(?in), us:puri(?in),
  if (datatype(?in) = xt:graph, st:clean(str(?in)),
  st:literal(st:clean(st:turtle(?in))))))
}


function st:clean(?in){
    replace(?in, "<", "&lt;") 		
}

function st:literal(?lit){
   st:format("<span class='literal'>%s</span>", replace(?lit, "\\\\n", "\n"))
}
  
function st:blank(?in){
  st:format(
    "<span id='%s'>%s</span>", 
    st:id(?in), st:apply-templates(?in))
}

function us:puri(?in){
    if (st:get(st:hyperlink, true),    
        st:display(?in), us:uri(?in))
}

function us:uri(?in){
    st:clean(st:turtle(?in))
}

function st:id(?in){
  coalesce(
    concat("it", st:vget(?in, st:id)), 
    concat("ab", st:index()))
}
      
function st:default(?in) {
   st:turtle(?in)
}



# LOD URI hypertext link generated as is 
# set by profile.ttl : st:param [ st:lod (URI) ]
#
function st:lod(?x){
     coalesce(mapany(rq:strstarts, ?x, st:get(st:lod)), false)
}
    

# display resource uri
function st:display(?x){
    let (?profile = coalesce(st:get(st:profile), st:null)){
      if (?profile = st:null){ 
        us:uri(?x) 
      }
      else if (st:lod(?x) || coalesce(st:getprofile(?x) = st:lod, false) ){
        st:call-template(st:link, ?x, us:uri(?x))
      }
      else {
        st:call-template(st:link, coalesce(st:pplink(us:prepare(?x)), us:prepare(?x)), us:uri(?x))
      }     
    }
}

function us:prepare(?uri){
    ?uri
#    coalesce(funcall(st:get(st:prepare), ?uri), ?uri)
}



function st:display2(?x){
    let (?profile = coalesce(st:get(st:profile), st:null)){
      if (?profile = st:null){ 
        st:call-template-with(st:sparql, st:esc, ?x) 
      }
      else if (st:lod(?x) || coalesce(st:getprofile(?x) = st:lod, false) ){
        st:call-template-with(st:sparql, st:linkesc, ?x)
      }
      else {
        st:call-template-with(st:sparql, st:linkprofile, ?x)
      }     
    }
}

# considered as an error if someone called st:visit(name, node, false) cf datashape main profile
function us:myerror(node) {
    st:visited(node)
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:pperror(?in) {
	format {
        "<span class='fail'>%s</span>"
	
        ?in
	}
}
where {

}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template  {
    if (us:myerror(?in), 
        st:call-template(st:pperror, st:call-template(st:list, ?in)),
        st:call-template(st:list, ?in)
  )
}
where {
    ?in rdf:first ?e
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template {

  if (us:myerror(?in), "<span class='fail'>", "")
  ?in 
  if (us:myerror(?in), "</span>", "")      
     
ibox { 
	st:nl()
	st:call-template(st:value, ?in)
} 
            
" ."      
}
where {
  ?in ?p ?y   
  filter isUri(?in)
}
limit 1
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template {
  if (?refer, concat(st:turtle(?in), " "), "[") 
  
  ibox {
    if (us:myerror(?in), 
        st:call-template(st:pperror, st:call-template(st:value, ?in)),
        st:call-template(st:value, ?in)
    )
  }
  
  if (?refer, " .", 
  if (?nested, "]", "] ."))
  
  # pretty printer of errors
  if (us:myerror(?in),
	st:call-template(st:pperrorsp, ?in),
  "")
}
where {
  ?in ?p ?y
  filter isBlank(?in)
  filter not exists { ?in rdf:first ?e }
  
  bind (exists { ?a ?q ?in } as ?nested)
  
  bind (
    ?nested 
    && ((st:isStart() && exists { ?a ?q ?in . ?b ?r ?in filter(?a != ?b) })
	|| exists { ?in ?q ?in }
       )
  as ?refer)
}
limit 1
]]>
</body>
</rule>

</rdf:RDF>
